'use strict';

const bsUtils                      = require('../utils/business-service-utils');
const logRequestInfo               = require('../utils/application-logs-utils').logRequestInfo;
const urlUtils                     = require('../utils/url-utils');
const urijs                        = require('urijs');
const svc2Approuter                = require('./service-to-approuter-middleware');
const jwtDecode                    = require('jwt-decode');
const applicationLogUtils          = require('../utils/application-logs-utils');
const passportUtils                = require('../passport/utils');
const html5RepoUtils               = require('../utils/html5-repo-utils');
const drUtils                      = require('../utils/dynamic-routing-utils');
const cookie                       = require('cookie');
const { promisify }                = require('util');
const svc2ApprouterProm            = promisify(svc2Approuter);
const getDestHTML5Applications     = promisify(bsUtils.getHTML5Applications);
const getApplicationLogsProm       = promisify(applicationLogUtils.getApplicationLogs);
const cacheBSDestinationsProm      = promisify(bsUtils.cacheBSDestinations);
const GET_APPLICATIONS_API         = '/applications';
const DOWNLOAD_APPLICATIONS_API    = '/applications/content';
const GET_APPLICATION_LOGS_API     = '/applicationLogs';
const DYNAMIC_LOG_LEVEL            = '/dynamicLogLevel';

module.exports = async function cacheServiceDestination(req, res, next) {
  if (!process.env.SAAS_APPROUTER || isExcluded(req.url)) {
    return next();
  }

  try {
    getTenant(req);
    getDisableDestCredentialsAccess(req);
    const apiName = await getApiName(req,res);
    await cacheAndGetCredentials(req);
    apiName === GET_APPLICATIONS_API      && await getApplications(req, res);
    apiName === DOWNLOAD_APPLICATIONS_API && await downloadApplication(req, res);
    apiName === GET_APPLICATION_LOGS_API  && await getApplicationLogsProm(req,res);
    apiName === DYNAMIC_LOG_LEVEL         && await dynamicLogLevel(req,res);
    !apiName && next();
  } catch (err) {
    next(err);
  }
};

async function downloadApplication(req, res) {
  if (req.disabledDestCred) {
    return await html5RepoUtils.downloadHTML5Application(req, res);
  }
  try {
    await bsUtils.downloadHTML5Application(req, res);
  } catch (err){
    if (err.statusCode !== 404){
      throw (err);
    }
    !isHTML5RepoCredsExcluded(req) && await html5RepoUtils.downloadHTML5Application(req, res);
  }
}

async function getApplications(req, res) {
  const html5Applications = !req.disabledDestCred && await getDestHTML5Applications(req);
  let html5ApplicationsRepo = {
    applications: []
  };
  if (!isHTML5RepoCredsExcluded(req)) {
    html5ApplicationsRepo = await html5RepoUtils.getHTML5Applications(req);
  }
  if (html5ApplicationsRepo.applications.length > 0 && html5Applications){
    html5Applications.applications = html5Applications.applications.concat(html5ApplicationsRepo.applications);
  }
  res.setHeader('Content-Type', 'application/json');
  res.end(JSON.stringify((html5Applications || html5ApplicationsRepo), null, 4));
}

async function cacheAndGetCredentials(req) {
  if (req.headers['x-approuter-authorization'] && !req.headers['x-destination-cache']
      && !process.env.SAAS_APPROUTER_CACHE_DESTINATIONS) {
    req.skipCachedApps = true;
    return;
  }
  const cookies     = req.headers['cookie'] ? cookie.parse(req.headers['cookie']) : null;
  const source      = cookies && cookies.locationAfterLogin ? {url: cookies.locationAfterLogin} : req;
  const appKey      = drUtils.getApplicationKey(source);
  const serviceName = appKey && ((appKey.bsKey && appKey.bsKey.appPrefix) || appKey.appPrefix);
  let credentials;

  // First try to get credentials from html5 repo
  if (!isHTML5RepoCredsExcluded(req) && !credentials) {
    await html5RepoUtils.cacheHTML5Applications(req);
    credentials = serviceName && html5RepoUtils.getCredentials(serviceName, req);
    const destinations = serviceName && html5RepoUtils.getDestinations(req);
    if (credentials && (credentials.uaa || credentials.ias)) {
      req.destinationCredentials = credentials;
    }
    if (destinations) {
      req.html5Destinations = destinations;
    }
  }

  // If no credentials found, try to get from destination service
  if (!req.disabledDestCred && (serviceName && !credentials) || !serviceName){
    await cacheBSDestinationsProm(req);
    credentials  = serviceName && bsUtils.getCredentials(serviceName,true,req);
    if (credentials && (credentials.uaa || credentials.ias)) {
      req.destinationCredentials = credentials;
    }
  }
}

async function dynamicLogLevel(req,res){
  const path = urijs.parse(req.url).path;
  if (path === '/dynamicLogLevel/info' || path === '/dynamicLogLevel/debug' || path === '/dynamicLogLevel'){
    logRequestInfo(req,`Setting dynamic log level for url ${path}`);
    if (req.method === 'POST') {
      let logLevel;
      if (path.endsWith('info')) {
        logLevel = 'INFO';
      } else if (path.endsWith('debug')) {
        logLevel = 'DEBUG';
      }
      await applicationLogUtils.setDynamicLogLevel(req, logLevel);
      res.end();
    } else if (req.method === 'DELETE') {
      await applicationLogUtils.unsetDynamicLogLevel(req);
      res.end();
    } else {
      const error = new Error('Method not allowed , use POST to set log level or DELETE to unset log level');
      error.status = 405;
      throw (error);
    }
  } else {
    const error = new Error('Invalid url path ' + path);
    error.status = 400;
    throw (error);
  }
}

function getTenant(req) {
  if (!process.env.TENANT_HOST_PATTERN && !req.headers['x-approuter-authorization']) {
    throw new Error('Tenant host pattern or x-approuter-authorization is not defined');
  }
  let urlTenant;
  if (process.env.TENANT_HOST_PATTERN) {
    urlTenant = passportUtils.getUrlTenant(req);
    if (!urlTenant) {
      throw new Error('Failed to determine url tenant');
    }
  }
  if (req.headers['x-approuter-authorization']) {
    if (req.headers['x-subscriber-tenant']) {
      req.tenant = req.headers['x-subscriber-tenant'];
    } else if (req.headers['x-approuter-authorization'].startsWith('Bearer')){
      const tokenDecoded = jwtDecode(req.headers['x-approuter-authorization']);
      req.tenant = tokenDecoded && tokenDecoded.ext_attr && tokenDecoded.ext_attr.zdn;
    } else if (req.headers['x-approuter-authorization'].startsWith('Basic')){
      req.tenant = urlTenant;
    }
    req.HTML5AppHost = req.headers['x-runtime-host'] ? req.headers['x-runtime-host'] : urlUtils.getAppRouterHost(req).replace(urlTenant, req.tenant);
  } else {
    req.tenant = urlTenant;
  }
}

function isExcluded(url) {
  if (!process.env.SAAS_APPROUTER_EXCLUDED_PATH) {
    return false;
  }
  try {
    const excludedPrefixes = JSON.parse(process.env.SAAS_APPROUTER_EXCLUDED_PATH);
    for (let i = 0; i <= excludedPrefixes.length; i++) {
      if (url.startsWith(excludedPrefixes[i])) {
        return true;
      }
    }
    return false;
  } catch (err) {
    throw new Error('Failed to parse SAAS_APPROUTER_EXCLUDED_PATH env. variable ' + err);
  }
}

function getDisableDestCredentialsAccess(req){
  let disabledDestCredTenants;
  if (process.env.DISABLED_DEST_CREDS_TENANTS){
    disabledDestCredTenants = JSON.parse(process.env.DISABLED_DEST_CREDS_TENANTS);
  }
  req.disabledDestCred = disabledDestCredTenants && disabledDestCredTenants.includes(req.tenant);
}

async function getApiName(req, res){
  const path = urijs.parse(req.url).path;
  let apiName = undefined;
  if (req.headers['x-approuter-authorization']) {
    switch (true) {
    case path.startsWith(DOWNLOAD_APPLICATIONS_API):
      apiName = DOWNLOAD_APPLICATIONS_API;
      break;
    case path.startsWith(GET_APPLICATION_LOGS_API):
      apiName = GET_APPLICATION_LOGS_API;
      break;
    case path.startsWith(GET_APPLICATIONS_API):
      apiName = GET_APPLICATIONS_API;
      break;
    case path.startsWith(DYNAMIC_LOG_LEVEL):
      apiName = DYNAMIC_LOG_LEVEL;
      req.requiredRoleCollection = process.env.LOG_SESSION_ROLE_COLLECTION;
      break;
    }
  }
  apiName && await svc2ApprouterProm(req,res);
  req.apiName = apiName;
  return apiName;
}

function isHTML5RepoCredsExcluded(req){
  let disabledHTML5RepoCredTenants;
  if (process.env.DISABLE_HTML5_REPO_CREDENTIALS) {
    if (process.env.DISABLE_HTML5_REPO_CREDENTIALS === '*'){
      disabledHTML5RepoCredTenants = true;
    } else {
      const subdomains = process.env.DISABLE_HTML5_REPO_CREDENTIALS && process.env.DISABLE_HTML5_REPO_CREDENTIALS.split(',');
      disabledHTML5RepoCredTenants = subdomains && subdomains.indexOf(req.tenant) > -1;
    }
    return disabledHTML5RepoCredTenants;
  }
}