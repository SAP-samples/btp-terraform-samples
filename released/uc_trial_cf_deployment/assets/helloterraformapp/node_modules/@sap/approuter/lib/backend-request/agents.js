'use strict';

const Cache = require('lru-cache');
const HttpProxyAgent = require('http-proxy-agent');
const HttpsProxyAgent = require('https-proxy-agent');
const HttpKeepAliveAgent = require('agentkeepalive');
const HttpsKeepAliveAgent = HttpKeepAliveAgent.HttpsAgent;


exports.proxyAgentsCache = new Cache(10);
exports.httpAgent = new HttpKeepAliveAgent();
exports.httpsAgent = new HttpsKeepAliveAgent();


function isSecureConnection(protocol) {
  return protocol === 'https:' || protocol === 'wss:';
}

exports.get = function (protocol, proxy, connectivityScenario) {
  let isSecure = connectivityScenario ? false : isSecureConnection(protocol);
  if (proxy) {
    return retrieveProxyAgent(proxy, isSecure);
  }
  return isSecure ? exports.httpsAgent : exports.httpAgent;
};

function retrieveProxyAgent(proxy, isSecure) {
  let id = buildIdentifier(proxy, isSecure);
  let agent = exports.proxyAgentsCache.get(id);
  if (agent) {
    return agent;
  }
  agent = isSecure ? new HttpsProxyAgent(proxy) : new HttpProxyAgent(proxy);
  exports.proxyAgentsCache.set(id, agent);
  return agent;
}

function buildIdentifier(proxy, isSecure) {
  let suffix = isSecure ? 'secure' : 'plain';
  return proxy + ':' + suffix;
}
