/* eslint-disable camelcase */

'use strict';

const _ = require('lodash');
const assert = require('assert');
const querystring = require('querystring');
const VError = require('verror').VError;
const traceUtils = require('../utils/trace-util');
const passportUtils = require('./utils');
const requestTraceEnabled = require('../utils/trace-util').requestTraceEnabled;
const uuid = require('uuid');

module.exports.OAuth2 = OAuth2;

function OAuth2(options) {
  ['clientid', 'tokenURL'].forEach(function (element) {
    assert(options[element], 'OAuth2 requires "' + element + '" option');
  });
  assert(options.clientsecret || options.certificate, 'OAuth2 requires clientsecret or certificate');
  this._options = _.clone(options);
}

OAuth2.prototype.getCodeAuthorizationUrl = async function (req, authorizationURL, callbackURL) {
  const authURLQuery = {
    'response_type': 'code',
    'client_id': this._options.clientid,
    'redirect_uri': callbackURL
  };
  if (this._options.scope){ // IAS
    authURLQuery.scope = this._options.scope;
    authURLQuery.zone_uuid = this._options.iasZoneId;
  }
  if (req.internalUrl && req.internalUrl.route && req.internalUrl.route.identityProvider) {
    authURLQuery['login_hint'] = JSON.stringify({
      origin: req.internalUrl.route.identityProvider
    });
  }
  if (req.routerConfig.stateParameterSecret){
    authURLQuery['state'] =  uuid.v4();
    await passportUtils.sendStateParameter({
      method: 'post',
      state: authURLQuery['state'],
      req
    });
  }
  return authorizationURL + '?' + querystring.stringify(authURLQuery);
};

OAuth2.prototype.getOAuthAccessToken = function (params, loggingContext, callback) {
  const tracer = loggingContext.getTracer(__filename);
  const logger = loggingContext.getLogger('/request/uaa');
  if (tracer.isEnabled('debug')) {
    tracer.debug('requesting UAA at %s: parameters %s', this._options.tokenURL, traceUtils.stringifyQueryParameters(params));
  }
  let requestStart = Date.now();
  params.client_id = this._options.clientid;
  if (this._options.scope === 'openid') { // IAS
    params.zone_uuid = this._options.iasZoneId;
  }
  let requestOptions = {
    headers: this._options.customHeaders,
    url: this._options.tokenURL,
  };

  if (this._options.certificate){
    requestOptions.cert = this._options.certificate;
    requestOptions.key  = this._options.key;
  } else {
    params.client_secret = this._options.clientsecret;
    if (this._options.scope === 'openid'){ // IAS
      requestOptions.headers.Authorization = 'Basic ' + Buffer
        .from(this._options.clientid + ':' + this._options.clientsecret)
        .toString('base64');
    }
  }
  requestOptions.form = params;

  passportUtils.callUaa(requestOptions, null, function (err, uaaResponse) {
    if (err) {
      if (requestTraceEnabled) {
        logger.info('Request to authentication service at %s failed in %d ms, error: %s', requestOptions.url, Date.now() - requestStart, err.message);
      }
      let error = new VError('request to authentication service at %s failed, error: %s, ', requestOptions.url, err.message);
      error.status = err.status;
      return callback(error);
    }
    callback(null, uaaResponse);
  });
};
