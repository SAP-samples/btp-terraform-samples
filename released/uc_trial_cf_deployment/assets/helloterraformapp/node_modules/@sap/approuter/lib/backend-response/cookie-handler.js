'use strict';

const tough = require('tough-cookie');
const sessionExt = require('../utils/session-ext');
const cookieUtils = require('../utils/cookie-utils');

exports.processCookies = function (setCookieHeader) {
  let sessionCookies = [];
  let nonSessionCookies = [];
  if (setCookieHeader) {
    for (let i = 0; i < setCookieHeader.length; ++i) {
      let oCookie = tough.Cookie.parse(setCookieHeader[i]);
      if (oCookie && isSessionCookie(oCookie)) {
        sessionCookies.push(oCookie);
      } else {
        nonSessionCookies.push(setCookieHeader[i]);
      }
    }
  }
  return {
    sessionCookies: sessionCookies,
    nonSessionCookies: nonSessionCookies
  };
};

exports.storeSessionCookies = function(sessionCookies, req, res) {
  const isService2Approuter = req.headers['x-approuter-authorization'];
  if (sessionCookies.length === 0) {
    return;
  }
  let logger = req.loggingContext.getLogger('/StoreSessionCookies');
  if (isService2Approuter && res) {
    logger.info('Sending encrypted backend session cookies to client');
    const backendName = cookieUtils.getBackendName(req);
    let mergedCookies = mergeCookies(req.headers['cookie'],sessionCookies,backendName,logger);
    cookieUtils.setCookie(res, cookieUtils.encryptCookies(mergedCookies, backendName));
    return;
  }
  sessionExt.update(req.session, function (session) {
    let cookieJar = session._cookieJar ? tough.CookieJar.deserializeSync(session._cookieJar) : new tough.CookieJar();
    sessionCookies.forEach(function (oCookie) {
      try {
        cookieJar.setCookieSync(oCookie, req.internalUrl.href);
      } catch (err) {
        logger.warning('Could not set session cookie: ', err.message);
      }
    });
    session._cookieJar = cookieJar.serializeSync();
  });
};

function isSessionCookie(oCookie) {
  return (!oCookie.expires || oCookie.expires === 'Infinity') && (!oCookie.maxAge || oCookie.maxAge === 'Infinity');
}

function mergeCookies(clientCookies, backendCookies, backendName, logger) {
  if (!clientCookies || process.env.SERVICE_2_APPROUTER_DISABLE_COOKIE_MERGE) {
    return backendCookies;
  }
  let decryptedClientCookies = cookieUtils.decryptCookies(clientCookies, backendName, logger).split(';');
  decryptedClientCookies.forEach(function (clientCookie) {
    let equalIndex = clientCookie.indexOf('=');
    if (equalIndex > -1) {
      let clientCookieKey = clientCookie.substr(0, equalIndex);
      let clientCookieValue = clientCookie.substr(equalIndex + 1);
      let backendCookieIndex = null;
      for (let i = 0; i < backendCookies.length; i++) {
        if (backendCookies[i].key) {
          if (backendCookies[i].key.trim() === clientCookieKey.trim()) {
            backendCookieIndex = i;
            break;
          }
        } else {
          logger && logger.error(`Missing key for cookie ${JSON.stringify(backendCookies[i])}`);
        }
      }
      let shouldDelete = shouldDeleteBackendCookie(backendCookies, backendCookieIndex, clientCookieValue, logger);
      if (backendCookieIndex === null) {
        backendCookies.push(tough.Cookie.parse(`${clientCookieKey}=${clientCookieValue};`));
      } else if (shouldDelete) {
        backendCookies.splice(backendCookieIndex, 1);
      }
    }
  });
  return backendCookies;
}

function shouldDeleteBackendCookie(backendCookies, backendCookieIndex,clientCookieValue, logger){
  if (!backendCookies || backendCookies.length === 0 || backendCookieIndex === null){
    return false;
  }
  if (backendCookies[backendCookieIndex].maxAge === 0){
    logger.info('Backend cookie ' + backendCookies[backendCookieIndex].key + 'with value ' + backendCookies[backendCookieIndex].value + ' will be deleted');
    return true;
  } else {
    return false;
  }
}
