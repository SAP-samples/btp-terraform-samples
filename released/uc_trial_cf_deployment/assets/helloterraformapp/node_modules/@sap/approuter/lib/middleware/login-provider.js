'use strict';

const basicAuthHeaderParser = require('basic-auth');
const cookie = require('cookie');
const cookieUtils = require('../utils/cookie-utils');
const oauthConfig = require('./../passport/oauth-configuration');
const passport = require('passport');
const headerUtil = require('../utils/header-util');
const pathUtil = require('../utils/path-util');
const sessionExt = require('../utils/session-ext');
const tokenUtils = require('../utils/token-utils');
const jwtDecode = require('jwt-decode');
const expiresAt = require('../passport/utils').getExpiresAt;
const logRequestInfo  = require('../utils/application-logs-utils').logRequestInfo;

module.exports = {
  isLoginRequired: function (req) {
    let isPublicPath = pathUtil.isPublicPath(req);
    let isUserLoggedIn = module.exports.isUserLoggedIn(req);
    logRequestInfo(req,`Is login required, isPublicPath ${isPublicPath}, isUserLoggedIn ${isUserLoggedIn}`);
    return !isPublicPath && !isUserLoggedIn;
  },

  isUserLoggedIn: function (req) {
    let token = req.session && req.session.user && req.session.user.token;
    if (!token || !token.accessToken || !token.expiryDate) {
      logRequestInfo(req,'User is not loggedIn, no user or token');
      return false;
    }
    return token.expiryDate > Date.now();
  },

  isExchangeTokenRequired: function (req) {
    let user = req.session && req.session.user;
    let token = user && user.token;
    let serviceName = req.destinationCredentials && req.destinationCredentials.serviceName;
    if (!token || !token.expiryDate || token.expiryDate < Date.now() || !serviceName) {
      return false;
    }
    let isExchangeTokenRequired = !user.businessServices || !user.businessServices[serviceName] || user.businessServices[serviceName].expireDate < Date.now();
    logRequestInfo(req,`Exchange token required = ${isExchangeTokenRequired} for service  ${serviceName}`);
    return isExchangeTokenRequired;
  },

  exchangeToken: function (req, cb) {
    let loginToken = req.session.user.token.accessToken;

    if (req.destinationCredentials.ias) {
      if (req.destinationCredentials.ias.sharedIASToken){
        updateSession(req, loginToken, null);
        return cb(null);
      }
      tokenUtils.exchangeToken(loginToken, headerUtil.getCorrelationId(req), req.destinationCredentials.ias, (err, iasExchangedToken) => {
        if (err) {
          return cb('Failed to exchange login token by an IAS token ' + err.message);
        }
        if (req.destinationCredentials.uaa) {
          tokenUtils.exchangeToken(loginToken, headerUtil.getCorrelationId(req), req.destinationCredentials.uaa, (err, xsuaaExchangedToken) => {
            if (err) {
              return cb('Failed to exchange login token by an XSUAA token in IAS context' + err.message);
            }
            updateSession(req, iasExchangedToken, xsuaaExchangedToken);
            return cb(null);
          });
        } else {
          updateSession(req, iasExchangedToken, null);
          return cb(null);
        }
      });
    } else {
      tokenUtils.exchangeToken(loginToken, headerUtil.getCorrelationId(req), req.destinationCredentials.uaa, (err, xsuaaExchangedToken) => {
        if (err) {
          return cb('Failed to exchange login token by an XSUAA token ' + err.message);
        }
        updateSession(req, null, xsuaaExchangedToken);
        return cb(null);
      });
    }
  },

  getAuthenticator: function (req, res, cb) {
    if (pathUtil.isBasicAuthProtectedPath(req)) {
      return getBasicAuthAuthenticator(req, cb);
    }

    getXSUAAOauthAuthenticator(req, function (err, authenticator) {
      if (err) {
        return cb(err);
      }

      if (process.env.PRESERVE_FRAGMENT === 'false') {
        let redirectCookieName = cookieUtils.getRedirectLocationCookieName();
        let cookies = (req.headers.cookie && cookie.parse(req.headers.cookie)) || {};
        let redirectCookie = cookies[redirectCookieName];
        if (!redirectCookie) {
          let locationAfterLogin = cookie.serialize(redirectCookieName, req.url, {path: '/', httpOnly: true});
          cookieUtils.setCookie(res, locationAfterLogin);
        }
      }
      res.setHeader('Cache-Control', headerUtil.NOCACHE_HEADER_VALUE);
      cb(null, authenticator);
    });
  }
};

function getXSUAAOauthAuthenticator(req, cb) {
  oauthConfig.getXSUAAOauthStrategy(req, function (err, oauthStrategy) {
    if (err) {
      return cb(err);
    }
    cb(null, createAuthenticator(oauthStrategy));
  });
}

function getBasicAuthAuthenticator(req, cb) {
  let basicAuthHeader = basicAuthHeaderParser(req);
  if (!basicAuthHeader) {
    return cb(401);
  }

  let credentials = {
    username: basicAuthHeader.name,
    password: basicAuthHeader.pass
  };

  oauthConfig.getBasicOauthStrategy(req, credentials, function (err, oauthStrategy) {
    if (err) {
      return cb(err);
    }
    cb(null, createAuthenticator(oauthStrategy));
  });
}

function createAuthenticator(oauthStrategy) {
  passport.use(oauthStrategy);
  return passport.authenticate(oauthStrategy.name,oauthConfig.SESSION_OPTIONS);
}

function updateSession(req, iasExchangedToken, xsuaaExchangedToken) {
  let exchangedTokenDecoded = iasExchangedToken ? jwtDecode(iasExchangedToken) : jwtDecode(xsuaaExchangedToken);
  let expireDate = expiresAt(exchangedTokenDecoded.exp - exchangedTokenDecoded.iat).getTime();
  let accessToken = iasExchangedToken ? iasExchangedToken : xsuaaExchangedToken;

  sessionExt.update(req.session, function (session) {
    if (!session.user.businessServices) {
      session.user.businessServices = {};
    }
    session.user.businessServices[req.destinationCredentials.serviceName] = {
      accessToken: accessToken,
      expireDate: expireDate,
      scopes: exchangedTokenDecoded ? exchangedTokenDecoded.granted_scopes || exchangedTokenDecoded.scope : null
    };
  });
}