'use strict';

const _ = require('lodash');
const url = require('url');
const logUtil = require('./logger');
const urlUtils = require('../utils/url-utils');
const tracer = logUtil.getTracer(__filename);

exports.resolveUaaConfig = resolveUaaConfig;
exports.retrieveTenantFromURL = retrieveTenantFromURL;
exports.toUrlString = toUrlString;

exports.getUaaConfig = function(req, cb) {
  let uaaOptions = req.extUaaConfigOptions || req.routerConfig.uaaConfig.options;
  if (req.app && req.app.approuter && req.app.approuter.resolveUaaConfig) {
    req.app.approuter.resolveUaaConfig(req, uaaOptions, cb);
  } else {
    resolveUaaConfig(req, uaaOptions, cb);
  }
};

function resolveUaaConfig(request, uaaOptions, callback) {
  if (uaaOptions.tenantmode !== 'shared') {
    callback(null, uaaOptions);
  } else {
    uaaOptions = _.clone(uaaOptions);
    let requestHost = urlUtils.getAppRouterHost(request);
    let tenantHostPattern = request.routerConfig.uaaConfig.tenantHostPattern;
    if (!tenantHostPattern){
      callback ('TENANT_HOST_PATTERN is not defined for tenant-mode shared');
    } else {
      callback(null, tenantUaaConfigResolver(uaaOptions, requestHost, tenantHostPattern));
    }
  }
}

function tenantUaaConfigResolver(uaaOptions, requestHost, tenantHostPattern) {
  let tenant = retrieveTenantFromURL (requestHost, tenantHostPattern);
  uaaOptions.tenant = tenant;
  let tenantUaaHost = (tenant ? tenant + '.' : '') + uaaOptions.uaadomain;
  uaaOptions.url = toUrlString(url.parse(uaaOptions.url), tenantUaaHost);
  if (uaaOptions.certurl) {
    let hostname = url.parse(uaaOptions.certurl).hostname;
    let certDomain = hostname.slice(hostname.indexOf('.') + 1);
    let tenantCertHost = (tenant ? tenant + '.' : '') + certDomain;
    uaaOptions.certurl = toUrlString(url.parse(uaaOptions.certurl), tenantCertHost);
  }

  tracer.debug('Tenant uaaUrl: request host "%s", TENANT_HOST_PATTERN: %s, uaa url "%s"', requestHost, tenantHostPattern, uaaOptions.url);

  return uaaOptions;
}

function toUrlString(parsedUaaUrl, tenantUaaHost) {
  return url.format({
    protocol: parsedUaaUrl.protocol,
    slashes: parsedUaaUrl.slashes,
    auth: parsedUaaUrl.auth,
    hostname: tenantUaaHost,
    port: parsedUaaUrl.port,
    pathname: parsedUaaUrl.pathname,
    search: parsedUaaUrl.search,
    hash: parsedUaaUrl.hash
  });
}

function retrieveTenantFromURL (approuterHost, tenantHostPattern) {
  approuterHost = approuterHost.split(':')[0]; // remove port
  let tenantHostPatternMatches = tenantHostPattern.exec(approuterHost);
  let tenant = tenantHostPatternMatches && tenantHostPatternMatches[1];
  return tenant;
}
