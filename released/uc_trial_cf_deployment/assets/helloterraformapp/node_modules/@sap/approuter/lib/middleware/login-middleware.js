'use strict';

const util = require('util');
const loginProvider = require('./login-provider');
const logoutProvider = require('./logout-provider');
const checkRequest = require('../utils/check-request');
const pathUtil = require('../utils/path-util');
const vcapUtils = require('../utils/vcap-utils');
const singleUseToken = require('../passport/single-use-token');

module.exports = function loginCheck(req, res, next) {
  if ((!loginProvider.isLoginRequired(req) && !loginProvider.isExchangeTokenRequired(req)) ||
      (logoutProvider.isLogoutRequest(req) && process.env.LOGOUT_WO_SESSION_TRIGGERS_LOGIN !== 'true')) {
    return next();
  } else if (loginProvider.isExchangeTokenRequired(req)){
    return loginProvider.exchangeToken(req,next);
  } else if (req.query &&  req.query.approuterAuthCode) {
    return singleUseToken.createSessionByAuthCode(req,next);
  }

  let authenticationType = pathUtil.pathAuthenticationType(req);
  if ((req.method !== 'GET' && (authenticationType === 'xsuaa' || authenticationType === 'ias')) || checkRequest.isAjaxRequest(req)) {
    return sendUnauthorizedRequest(next);
  }

  loginProvider.getAuthenticator(req, res, function(err, authenticator) {
    if (err) {
      if (err === 401) {
        return sendUnauthorizedRequest(next, { 'WWW-Authenticate': 'Basic realm="' + getRealm() + '"' });
      }
      return next(err);
    }
    if (process.env.PRESERVE_FRAGMENT !== 'false') {
      req.res = res;
    }
    authenticator(req, res, next);
  });
};

function sendUnauthorizedRequest(next, headers) {
  let error = new Error('Authentication required');
  error.status = 401;
  error.headers = headers;
  next(error);
}

function getRealm() {
  let appEnv = vcapUtils.getAppEnv();
  let uris = appEnv.uris;
  let uri = (uris && uris.length > 0) ? uris[0] : '';

  let name = appEnv.application_name || appEnv.name;

  return util.format('%s at %s', name, uri);
}