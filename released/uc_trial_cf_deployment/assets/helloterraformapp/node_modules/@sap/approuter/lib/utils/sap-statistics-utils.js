'use strict';
const urlUtils = require('../utils/url-utils');

const START_TOTAL = 'startTotal';
const START_BACKEND = 'startBackend';
const END_TOTAL = 'endTotal';

module.exports = {

  START_TOTAL,
  START_BACKEND,
  END_TOTAL,

  setTime: function (processStep, req) {

    let d1 = new Date();
    let t1 = d1.getTime();

    switch (processStep) {
    case START_TOTAL:
      req.sapStatisticsStartTotal = t1;
      break;
    case START_BACKEND:
      req.sapStatisticsStartBackend = t1;
      break;
    case END_TOTAL:
      req.sapStatisticsEndTotal = t1;
      break;
    }
  },

  isSapStatisticsEnabledByQueryParameter: function (req) {
    return (urlUtils.getQueryParam(req, 'sap-statistics') === 'true' ? true : false);
  },

  isSapStatisticsEnabledByRequestHeader: function (req) {
    let sapStatisticsHeader = req.headers['sap-statistics'];
    return (sapStatisticsHeader ? true : false);
  },

  isSapStatisticsEnabled: function (req) {
    let sapStatisticsEnablement = this.isSapStatisticsEnabledByQueryParameter(req);
    if (sapStatisticsEnablement) {
      return true;
    }
    sapStatisticsEnablement = this.isSapStatisticsEnabledByRequestHeader(req);
    return (sapStatisticsEnablement);
  },

  getSapStatisticsResponseHeaderValue: function (req) {
    let extStr;
    let startTotal = getTime(START_TOTAL, req);
    let startBackend = getTime(START_BACKEND, req);
    let endTotal = getTime(END_TOTAL, req);
    let total = endTotal - startTotal;
    let totalStr = 'total=' + total.toString();
    if (startBackend > 0) {
      let ext = endTotal - startBackend;
      extStr = ', ext=' + ext.toString();
    }
    let statisticsStr = totalStr + extStr;
    return statisticsStr;
  }

};

function getTime(processStep, req) {
  switch (processStep) {
  case START_TOTAL:
    return req.sapStatisticsStartTotal;
  case START_BACKEND:
    return req.sapStatisticsStartBackend;
  case END_TOTAL:
    return req.sapStatisticsEndTotal;
  }
}
