'use strict';
const request             = require('./request-utils');
const tokenUtils          = require('./token-utils');
const headerUtils         = require('./header-util');
const html5RepoService    = 'html5-apps-repo-rt';
const url                 = require('url');
const stdTTL              = process.env.HTML5_APPS_CACHE || 300;
const checkPeriod         = stdTTL + 20;
const NodeCache           = require('node-cache');
const html5AppsCache      = new NodeCache({stdTTL: stdTTL, checkperiod: checkPeriod});
const logUtil             = require('./application-logs-utils');
const CONFIG_CREDENTIALS  = 'com.sap.service-credentials';

module.exports.cacheHTML5Applications           = cacheHTML5Applications;
module.exports.getHTML5Applications             = getHTML5Applications;
module.exports.downloadHTML5Application         = downloadHTML5Application;
module.exports.getCredentials                   = getCredentials;
module.exports.getDestinations                  = getDestinations;
module.exports.attachCredentials                = attachCredentials;

async function cacheHTML5Applications(req) {
  let sapCloudServiceKeys = html5AppsCache.get(req.tenant);
  // Fill the html5 apps cache if cache is empty or explicitly requested to fetch from html5 repo
  if (req.skipCachedApps || !sapCloudServiceKeys) {
    const queryIndex = req.url.indexOf('?');
    const queries = queryIndex > -1 && req.apiName === '/applications' ? req.url.slice(queryIndex) : '';

    // Get applications metadata
    let requestOptions = await _getHTML5RepoOptions(req, `/applications/metadata/${queries}`);
    logUtil.logRequestInfo(req,`Fetching HTML5 applications metadata for tenant ${req.tenant}`);
    let result = await request.axiosRequest('get',requestOptions);
    if (result.error){
      throw new Error('Failed to fetch applications metadata ' + result.error
          + (result.response && result.response.statusCode ? `response status ${result.response.statusCode}` : ''));
    }
    const applicationsMetadata = result.body && JSON.parse(result.body);
    let appsFound = applicationsMetadata && applicationsMetadata.length > 0 ? applicationsMetadata.length : 0;
    logUtil.logRequestInfo(req,`${appsFound} HTML5 applications retrieved for tenant ${req.tenant}`);
    appsFound > 0 && _addHTML5ApplicationsToCache(applicationsMetadata, req);

    // Get subscribed applications metadata
    requestOptions = await _getHTML5RepoOptions(req, '/applications/subscriptions');
    logUtil.logRequestInfo(req,`Fetching subscribed HTML5 applications metadata for tenant ${req.tenant}`);
    result = await request.axiosRequest('get',requestOptions);
    if (result.error){
      throw new Error('Failed to fetch applications metadata ' + result.error
          + (result.response && result.response.statusCode ? `response status ${result.response.statusCode}` : ''));
    }
    const subscribedApplications = result.body && JSON.parse(result.body);
    appsFound = subscribedApplications && subscribedApplications.length > 0 ? subscribedApplications.length : 0;
    logUtil.logRequestInfo(req,`${appsFound} subscribed HTML5 applications retrieved for tenant ${req.tenant}`);
    appsFound > 0 && _addHTML5ApplicationsToCache(subscribedApplications, req, true);

    sapCloudServiceKeys = html5AppsCache.get(req.tenant);
    const sapCloudServiceKeysFound = (sapCloudServiceKeys && Object.keys(sapCloudServiceKeys).length) || 0;
    logUtil.logRequestInfo(req,`${sapCloudServiceKeysFound} sap cloud service keys cached for tenant ${req.tenant}`);
  }
}

async function getHTML5Applications(req) {
  let sapCloudServiceKeys = !req.skipCachedApps && html5AppsCache.get(req.tenant);
  if (!sapCloudServiceKeys){
    await cacheHTML5Applications(req);
    sapCloudServiceKeys = html5AppsCache.get(req.tenant);
  }
  const approuterHost = req.HTML5AppHost.indexOf('https://') !== 0 ? 'https://' + req.HTML5AppHost : req.HTML5AppHost;
  let result = {
    applications: [],
    errors: []
  };
  if (sapCloudServiceKeys) {
    for (let sapCloudServiceKey in sapCloudServiceKeys) {
      sapCloudServiceKeys[sapCloudServiceKey].applications.forEach((app) => {
        const serviceKeyComponents = _getSapCloudServiceKeyComponents(sapCloudServiceKey,true);
        const baseAppKey = serviceKeyComponents.serviceName + '.' + app.applicationName + '-' + app.applicationVersion;
        app['url'] = approuterHost + '/' + baseAppKey;
        app['uniqueUrl'] = approuterHost + '/' + app.appHostId + '.' + baseAppKey;
        app['destinations'] = sapCloudServiceKeys[sapCloudServiceKey].destinations;
        app['businessServices'] = _getBoundBusinessServices(sapCloudServiceKeys[sapCloudServiceKey].credentials);
        result.applications.push(app);
      });
    }
  }
  return result;
}

async function downloadHTML5Application(req, res){
  const dynamicRoutingUtils = require('./dynamic-routing-utils');
  const appKey = dynamicRoutingUtils.getApplicationKey({url: '/' + url.parse(req.url).path.split('/')[3]});
  const html5Applications = await getHTML5Applications(req);
  let appHostId;

  for (let i = 0; i < html5Applications.applications.length; i++) {
    if (html5Applications.applications[i]['sapCloudService'].replace(/\./g, '') === appKey.appPrefix &&
        html5Applications.applications[i].applicationName === appKey.appNameWithoutPrefix &&
        html5Applications.applications[i].applicationVersion === appKey.appVersion &&
        ((appKey.appDestinationId && appKey.appDestinationId === html5Applications.applications[i]['appHostId']) ||
            !appKey.appDestinationId)) {
      appHostId = html5Applications.applications[i]['appHostId'];
      break;
    }
  }
  if (!appHostId) {
    throw ('Application ' + appKey.entireKey + ' not found');
  }
  const path = '/applications/content/' + appKey.appNameWithoutPrefix + '-' + appKey.appVersion;
  const requestOptions = await _getHTML5RepoOptions(req, path, appHostId);
  await request.pipe(requestOptions,res);
}

function getCredentials(serviceName, req){
  const configuration = getConfiguration(serviceName, req);
  return configuration && (configuration.credentials || configuration);
}

function attachCredentials(mainServiceName, dependentServiceName,contextId, req){
  if (!req.html5RepoCredentials && mainServiceName) {
    const sapCloudServiceKeys = req && req.tenant && html5AppsCache.get(req.tenant);
    if (!sapCloudServiceKeys) {
      return null;
    }
    req.html5RepoCredentials = {};
    let serviceFound = false;
    for (let sapCloudServiceKey in sapCloudServiceKeys) {
      const serviceKeyComponents = _getSapCloudServiceKeyComponents(sapCloudServiceKey, true);
      if ((contextId && contextId === serviceKeyComponents.appHostId && serviceKeyComponents.serviceName === mainServiceName) ||
          (!contextId && serviceKeyComponents.serviceName === mainServiceName)) {
        serviceFound = true;
        req.html5RepoCredentials[mainServiceName] = sapCloudServiceKeys[sapCloudServiceKey].credentials;
        req.html5RepoDestinations = sapCloudServiceKeys[sapCloudServiceKey].destinations;
        if (!dependentServiceName){
          return;
        }
        for (let prop in sapCloudServiceKeys[sapCloudServiceKey].credentials) {
          const bsCredentials = sapCloudServiceKeys[sapCloudServiceKey].credentials[prop];
          const bsName = bsCredentials && bsCredentials['sap.cloud.service'] && bsCredentials['sap.cloud.service'].replace(/\./g, '');
          // eslint-disable-next-line max-depth
          if (bsName === dependentServiceName) {
            req.html5RepoCredentials[dependentServiceName] = bsCredentials;
          }
        }
      }
    }
    if (!serviceFound){
      req.html5RepoCredentials = null;
    }
  }
}

function getDestinations(req){
  const destinations = req && req.html5RepoDestinations;
  const validators  = require('../configuration/validators');
  destinations && validators.validateDestinations(destinations);
  return destinations && destinations.reduce((obj, item) => Object.assign(obj, { [item.name]: item}), {});
}

function getConfiguration(serviceName, req){
  return req && req.html5RepoCredentials && req.html5RepoCredentials[(serviceName).replace(/\./g, '')] || null;
}

function _addHTML5ApplicationsToCache(applicationsMetadata, req, addApps) {
  const tenant = req.tenant;
  const html5ApplicationsCache = addApps ? html5AppsCache.get(tenant) : {};
  applicationsMetadata.forEach((app) => {
    const configuration       = app.configuration && Object.assign({}, app.configuration);
    const credentials         = configuration && configuration[CONFIG_CREDENTIALS];
    const destinations        = configuration && configuration['destinations'];
    const html5RuntimeEnabled = configuration && configuration['HTML5Runtime_enabled'];
    app.configuration   = !!configuration;
    if (app.configuration && ((credentials && (credentials.xsuaa || credentials.identity)) || html5RuntimeEnabled)
        && app.sapCloudService) {
      let sapCloudServiceKey = app.sapCloudService + '!' + app.appHostId;
      if (!html5ApplicationsCache[sapCloudServiceKey]) {
        html5ApplicationsCache[sapCloudServiceKey] = {
          credentials: {serviceName: app.sapCloudService},
          destinations: destinations,
          applications: []
        };
        html5ApplicationsCache[sapCloudServiceKey].applications.push(app);

        for (const prop in configuration[CONFIG_CREDENTIALS]) {
          if (prop === 'xsuaa') {
            html5ApplicationsCache[sapCloudServiceKey].credentials['uaa'] = credentials[prop][0]['credentials'];
          } else if (prop === 'identity') {
            html5ApplicationsCache[sapCloudServiceKey].credentials['ias'] = credentials[prop][0]['credentials'];
          } else if (credentials[prop][0]['credentials']['sap.cloud.service'] === 'html5-apps-repo-dt') {
            html5ApplicationsCache[sapCloudServiceKey].credentials['html5-apps-repo'] = credentials[prop][0]['credentials'];
          } else {
            html5ApplicationsCache[sapCloudServiceKey].credentials[prop] = credentials[prop][0]['credentials'];
          }
        }
        if (!html5ApplicationsCache[sapCloudServiceKey].credentials['uaa'] && !html5ApplicationsCache[sapCloudServiceKey].credentials['ias']){
          html5ApplicationsCache[sapCloudServiceKey].credentials['ias'] = { 'sharedIASToken': true};
        }
      } else {
        html5ApplicationsCache[sapCloudServiceKey].applications.push(app);
      }
    }
  });
  html5AppsCache.set(tenant, html5ApplicationsCache);
}

async function _getHTML5RepoOptions(req, path, appHostId) {
  const bsUtils = require('./business-service-utils');
  const html5RepoCredentials = bsUtils.getCredentials(html5RepoService);
  if (!html5RepoCredentials) {
    throw new Error('Missing html5 apps repo binding');
  }
  const requestOptions = {
    url: html5RepoCredentials && (html5RepoCredentials.uri + path),
    headers: {}
  };
  if (appHostId){
    requestOptions.headers['x-app-host-id'] = appHostId;
  }
  if (req.app.services && req.app.services[html5RepoService] && req.app.services[html5RepoService][req.tenant]
      && req.app.services[html5RepoService][req.tenant].token
      && req.app.services[html5RepoService][req.tenant].token.tokenRefreshTimestamp - Date.now() > 0) {
    requestOptions.headers.Authorization = 'Bearer ' + req.app.services[html5RepoService][req.tenant].token.accessToken;
  } else {
    let tokenCredentials = html5RepoCredentials.uaa;
    tokenCredentials.label = html5RepoCredentials['sap.cloud.service'];
    const token = await tokenUtils.getClientCredentialsToken(req.tenant, headerUtils.getCorrelationId(req), tokenCredentials, null);
    req.app.services[html5RepoService][req.tenant] = {token: token};
    requestOptions.headers.Authorization = 'Bearer ' + req.app.services[html5RepoService][req.tenant].token.accessToken;
  }
  return requestOptions;
}

function _getSapCloudServiceKeyComponents(sapCloudServiceKey, ignoreDots){
  const indexOfAppHostId = sapCloudServiceKey.indexOf('!');
  const appHostId = sapCloudServiceKey.substring(indexOfAppHostId + 1);
  let html5AppServiceName = indexOfAppHostId > -1 ? sapCloudServiceKey.substring(0, indexOfAppHostId) : sapCloudServiceKey;
  html5AppServiceName = ignoreDots ? html5AppServiceName.replace(/\./g, '') : html5AppServiceName;
  return {
    serviceName : html5AppServiceName,
    appHostId   : appHostId
  };
}

function _getBoundBusinessServices(credentials){
  const boundServices = [];
  for (let serviceName in credentials){
    if (serviceName !== 'destination' && serviceName !== 'html5-apps-repo'
        && serviceName !== 'uaa' && serviceName !== 'ias' && serviceName !== 'serviceName'){
      boundServices.push({
        instanceName   : serviceName,
        html5AppRepo   : credentials[serviceName]['html5-apps-repo'],
        sapCloudService: credentials[serviceName]['sap.cloud.service']
      });
    }
  }
  return boundServices;
}