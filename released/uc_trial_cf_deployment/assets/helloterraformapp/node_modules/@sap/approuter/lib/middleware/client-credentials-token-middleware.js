'use strict';
const tokenUtils = require('../utils/token-utils');
const headerUtils = require('../utils/header-util');
const uaaUtils = require('../utils/uaa-utils');
const xsenv = require('@sap/xsenv');
const CONNECTIVITY = 'connectivity';
const XSUAA = 'xsuaa';
const vcapUtils = require('../utils/vcap-utils');
const connectivityCredentials = vcapUtils.getServiceCredentials({ label: CONNECTIVITY });

module.exports = function renewToken(req, res, next) {
  if (req.internalUrl && req.internalUrl.route && req.internalUrl.route.service) {
    assignServiceIfNeeded(req, req.internalUrl.route.service);
    let businessServiceData = getBusinessServiceData(req);
    if (businessServiceData) {
      tokenUtils.loadClientCredentialsToken(req.app, headerUtils.getCorrelationId(req), businessServiceData.credentials, businessServiceData.service, function (err) {
        return next(err);
      });
    } else {
      return next();
    }
  } else if (req.internalUrl && req.internalUrl.route && req.internalUrl.route.destination) {
    if (connectivityCredentials) {
      assignServiceIfNeeded(req, CONNECTIVITY);
      let businessServiceData = getBusinessServiceData(req, CONNECTIVITY);
      if (businessServiceData) {
        tokenUtils.loadClientCredentialsToken(req.app, headerUtils.getCorrelationId(req), businessServiceData.credentials, businessServiceData.service, function (err) {
          if (err) {
            return next(err);
          }
          return exchangeConnectivityToken(req, next);
        });
      } else {
        return exchangeConnectivityToken(req, next);
      }
    }
    else {
      return next();
    }
  } else {
    return next();
  }
};

function getClientCredentialTokenByTenant(correlationId, tenant, credentials, zoneInfo, cb) {
  return tokenUtils.getClientCredentialsTokenByTenant(correlationId, tenant, credentials, zoneInfo, cb);
}

function getServiceByName(requestedServiceName) {
  requestedServiceName = requestedServiceName === 'html5-apps-repo-rt' ? 'html5-apps-repo' : requestedServiceName;
  let services = xsenv.readServices();
  if (services) {
    for (let serviceName in services) {
      let service = services[serviceName];
      if (service.label === requestedServiceName && service.credentials) {
        return service.credentials.uaa ? service.credentials.uaa : service.credentials;
      }
    }
  }
  return null;
}

function exchangeConnectivityToken(req, next) {
  let connectivityCredentials = getServiceByName(CONNECTIVITY);
  let ownUAACredentials = getServiceByName(XSUAA);

  if (!connectivityCredentials || !ownUAACredentials) {
    return next();
  }
  uaaUtils.getUaaConfig(req, function (err, uaaOptions) {
    if (err || !uaaOptions) {
      return next(err ? err : 'Invalid UAA options');
    }
    req.tenant = uaaOptions.tenant;
    connectivityCredentials.label = CONNECTIVITY;
    if ((uaaOptions.tenantmode === 'shared' && uaaOptions.tenant !== ownUAACredentials.identityzone) &&
        ((req.app.services[CONNECTIVITY][uaaOptions.tenant] &&
            req.app.services[CONNECTIVITY][uaaOptions.tenant].token &&
            req.app.services[CONNECTIVITY][uaaOptions.tenant].token.tokenRefreshTimestamp - Date.now() <= 0) ||
            !req.app.services[CONNECTIVITY][uaaOptions.tenant])) {
      getClientCredentialTokenByTenant(headerUtils.getCorrelationId(req), uaaOptions.tenant, connectivityCredentials, req.zoneInfo, function (err, token) {
        if (err) {
          return next(err);
        }
        req.app.services[CONNECTIVITY][uaaOptions.tenant] = {
          token: token
        };
        return next();
      });
    } else {
      return next();
    }
  });
}

function assignServiceIfNeeded(req, serviceName) {
  if (!req.app.services) {
    req.app.services = {};
  }
  if (!req.app.services[serviceName]) {
    req.app.services[serviceName] = {};
  }
}

function getBusinessServiceData(req, serviceNamePrm) {
  const serviceName = serviceNamePrm || req.internalUrl.route.service;
  let serviceFromEnvCredentials = null;
  if (req && req.app && req.app.services && req.app.services[serviceName]) {
    let service = req.app.services[serviceName];
    if (!service.token || (service.token && service.token.tokenRefreshTimestamp - Date.now() <= 0)) {
      serviceFromEnvCredentials = getServiceByName(serviceName);
      if (!serviceFromEnvCredentials) {
        return null;
      }
      return {
        credentials: serviceFromEnvCredentials,
        service: serviceName
      };
    }
  }
}