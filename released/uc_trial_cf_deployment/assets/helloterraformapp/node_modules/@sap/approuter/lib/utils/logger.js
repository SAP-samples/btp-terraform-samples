/* eslint-disable camelcase */
'use strict';

const LoggingLib = require('@sap/logging');
const auditLogging = require('@sap/audit-logging');
const xsenv = require('@sap/xsenv');

const appLoggingContext = LoggingLib.createAppContext();
let auditlogCredentials;

module.exports.getAuditLogger = function (callback) {

  try {
    auditlogCredentials = xsenv.serviceCredentials({tag: 'auditlog'});
  } catch (error) {
    auditlogCredentials = null;
  }

  if (!auditlogCredentials) {
    auditlogCredentials = {
      logToConsole: true
    };
  }

  auditLogging.v2(auditlogCredentials, function (err, auditLog) {
    let auditLogObj = auditLog;
    if (err) {
      module.exports.getLogger('/approuter').warning('Error in audit logging v2 initialization: ', err, ', using v1 of audit logging');
      auditLogObj = auditLogging(auditlogCredentials);
    }
    if (!auditLogObj) {
      return callback('Could not create an auditlog instance');
    }
    auditLogObj.auditlogCredentials = auditlogCredentials;
    callback(null, auditLogObj);
  });
};

module.exports.getLogger = function (loggerCategory) {
  return appLoggingContext.createLogContext().getLogger(loggerCategory);
};

module.exports.getTracer = function (location) {
  return appLoggingContext.createLogContext().getTracer(location);
};

module.exports.getExpressMiddleware = function () {
  return LoggingLib.middleware({appContext: appLoggingContext});
};

module.exports.createRequestContext = function (req) {
  // noinspection JSAnnotator
  return appLoggingContext.createLogContext({req});
};

module.exports.writeToAuditLog = function (req, loggingData, message, cb) {
  let userObject = checkPlan(req, loggingData);

  req.app.auditLogger.securityMessage(message)
    .by(userObject.user)
    .tenant(userObject.tenantid, userObject.subdomain)
    .log(cb);
};

module.exports.getAuditLogAdditionalData = function (req)  {
  const tenantid = req.session.user && req.session.user.tenantid;
  let userToLog = req.session.user && req.session.user.name;
  let auditlogCredentials;

  try {
    auditlogCredentials = xsenv.serviceCredentials({tag: 'auditlog'});
  } catch (error){
    auditlogCredentials = null;
  }

  let IP = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
  if (!auditlogCredentials) {
    userToLog = '******';
    IP = '******';
  }

  return {user: userToLog, IP: IP, tenantid: tenantid};
};

function checkPlan(req, loggingData) {
  const passportUtils = require('../passport/utils');
  let userObject = {};

  if (req.app.auditLogger.auditlogCredentials && req.app.auditLogger.auditlogCredentials.uaa) {
    userObject.user = '$USER';

    let tenantInfo = passportUtils.getTenantInfo(req);
    userObject.tenantid = !tenantInfo.multitenant ? '$PROVIDER' : '$SUBSCRIBER';
    userObject.subdomain = !tenantInfo.multitenant ? null : tenantInfo.tenant;

  } else {
    userObject.user = loggingData.user;
    userObject.tenantid = loggingData.tenantid;
  }

  return userObject;
}
