'use strict';

const _ = require('lodash');
const logger = require('../utils/logger').getLogger('/Configuration');
const path = require('path');
const safeRegex = require('safe-regex');
const VError = require('verror').VError;
const xsenv = require('@sap/xsenv');
const configurationUtils = require('../utils/configuration-utils');
const validators = require('./validators');
const destinationUtils = require('../utils/destination-utils');

exports.load = load;
exports.loadDestinations = loadDestinations;
exports.compression = loadGroupedConfigurations().compression;

function load(workingDir) {
  const filePath = path.join(workingDir, 'default-env.json');
  xsenv.loadEnv(filePath);

  let envConfig = {};
  envConfig.destinations = loadDestinations();
  envConfig.additionalHeaders = loadAdditionalHeaders();
  envConfig.plugins = loadPlugins(envConfig.destinations);
  envConfig.clickjackCheckWhitelist = loadClickjackWhitelist();
  envConfig.wsAllowedOrigins = loadWebSocketWhitelist();
  envConfig.secureSessionCookie = resolveSessionCookieSecureMode();
  envConfig.cors = loadCors();
  envConfig.cookies = loadCookies();
  envConfig.extSessionMgt = loadExternalSessionManager();

  const grouped = loadGroupedConfigurations();
  envConfig = _.merge(envConfig, grouped);

  return envConfig;
}

function loadExternalSessionManager() {
  const extSessionMgt = loadJsonVar('EXT_SESSION_MGT');
  if (!extSessionMgt) {
    return null;
  }
  validators.validateSessionStoreInstance(extSessionMgt);
  return extSessionMgt;
}

function loadCookies() {
  const cookies = loadJsonVar('COOKIES');
  if (!cookies) {
    logger.info('No COOKIES environment variable');
    return null;
  }
  validators.validateCookies(cookies);
  return cookies;
}


function loadCors() {
  const cors = loadJsonVar('CORS');
  if (!cors) {
    return;
  }
  validators.validateCors(cors);
  cors.forEach(function (corsConfig) {
    corsConfig.uriPattern = configurationUtils.constructRegExp(corsConfig.uriPattern);
    if (!safeRegex(corsConfig.uriPattern)) {
      logger.warning('Cors configuration with uriPattern ', corsConfig.uriPattern, ' is vulnerable to ReDoS attacks');
    }
  });
  return cors;
}

function loadDestinations(destinations) {
  destinations = destinations || loadJsonVar('destinations');
  if (!destinations) {
    destinations = {};
    logger.info('Using empty destinations to run');
    return destinations;
  }
  destinationUtils.normalizeDestinationProperties(destinations);
  validators.validateDestinations(destinations);
  destinationUtils.adjustDestinationProperties(destinations);
  return _.keyBy(destinations, 'name');
}

function loadAdditionalHeaders() {
  let additionalHeaders = loadJsonVar('httpHeaders');
  if (!additionalHeaders) {
    return [];
  }
  validators.validateHeaders(additionalHeaders);
  additionalHeaders = _.map(additionalHeaders, function (header) {
    const normalizedHeader = {};
    _.forEach(header, function (value, key) {
      normalizedHeader[key.toLowerCase()] = value;
    });
    return normalizedHeader;
  });
  return additionalHeaders;
}

function loadPlugins(destinations) {
  const plugins = loadJsonVar('plugins');
  if (!plugins) {
    return null;
  }
  validators.validatePlugins(plugins, destinations);
  plugins.forEach(function (currentPlugin) {
    currentPlugin.source = configurationUtils.constructRegExp(currentPlugin.source);
  });
  return plugins;
}

function loadClickjackWhitelist() {
  return loadOriginsWhitelist('CJ_PROTECT_WHITELIST');
}

function loadWebSocketWhitelist() {
  return loadOriginsWhitelist('WS_ALLOWED_ORIGINS');
}

function loadOriginsWhitelist(envVar) {
  const whitelist = loadJsonVar(envVar);

  if (!whitelist) {
    return null;
  }
  validators.validateWhitelist(whitelist);
  whitelist.forEach(function (item) {
    if (typeof item.port === 'string') {
      item.port = parseInt(item.port);
    }
  });
  return whitelist;
}

function resolveSessionCookieSecureMode() {
  switch (process.env.SECURE_SESSION_COOKIE) {
  case 'true':
    return true;
  case 'false':
    return false;
  default:
    return 'auto';
  }
}

function loadGroupedConfigurations() {
  let grouped = {
    sessionTimeout: loadJsonVar('SESSION_TIMEOUT'),
    incomingConnectionTimeout: loadJsonVar('INCOMING_CONNECTION_TIMEOUT'),
    jwtRefresh: loadJsonVar('JWT_REFRESH'),
    tenantHostPattern: process.env['TENANT_HOST_PATTERN'],
    destinationHostPattern: process.env['DESTINATION_HOST_PATTERN'],
    compression: loadJsonVar('COMPRESSION'),
    externalReverseProxy: loadJsonVar('EXTERNAL_REVERSE_PROXY'),
    directRoutingUriPatterns: loadJsonVar('DIRECT_ROUTING_URI_PATTERNS'),
    cfNodeJsLoggingLevel: process.env['CF_NODEJS_LOGGING_LEVEL'] || 'error',
    http2Support: loadJsonVar('HTTP2_SUPPORT'),
    serverKeepAlive: loadJsonVar('SERVER_KEEP_ALIVE'),
    minimumTokenValidity: loadJsonVar('MINIMUM_TOKEN_VALIDITY'),
    dynamicIdentityProvider: loadJsonVar('DYNAMIC_IDENTITY_PROVIDER'),
    stateParameterSecret: process.env['STATE_PARAMETER_SECRET'],
  };

  grouped = _.pickBy(grouped, function (value) {
    return (value || value === '' || value === 0);
  });

  if (!grouped.hasOwnProperty('jwtRefresh')) {
    grouped.jwtRefresh = 5; // 5 is the default JWT_REFRESH
  }
  const sendXFrameOptions = loadJsonVar('SEND_XFRAMEOPTIONS');
  grouped.sendXFrameOptions = (typeof sendXFrameOptions !== 'undefined') ? sendXFrameOptions : true;
  validators.validateEnvironmentSettings(grouped);

  if (grouped.tenantHostPattern) {
    grouped.tenantHostPattern = configurationUtils.constructRegExp(grouped.tenantHostPattern);
    if (!safeRegex(grouped.tenantHostPattern)) {
      logger.warning('TENANT_HOST_PATTERN is vulnerable to ReDoS attacks');
    }
  }

  if (grouped.destinationHostPattern) {
    grouped.destinationHostPattern = configurationUtils.constructRegExp(grouped.destinationHostPattern);
    if (!safeRegex(grouped.destinationHostPattern)) {
      logger.warning('DESTINATION_HOST_PATTERN is vulnerable to ReDoS attacks');
    }
  }

  if (grouped.directRoutingUriPatterns) {
    grouped.directRoutingUriPatterns.forEach(function (currentDirectPattern) {
      if (validators.checkStringOrRegex(currentDirectPattern)) {
        return;
      }
      throw new VError('Direct routing uri pattern %s must be a string or a regular expression', currentDirectPattern.toString());
    });
  }

  return grouped;
}

function loadJsonVar(envVar) {
  if (envVar in process.env) {
    try {
      return JSON.parse(process.env[envVar]);
    } catch (e) {
      throw new VError(e, 'Invalid value for environment variable %s', envVar);
    }
  }
}