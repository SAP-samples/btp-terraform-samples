'use strict';

const tracer        = require('../utils/logger').getTracer(__filename);
const iasUtils      = require('../utils/ias-utils');
const passportUtils = require('../passport/utils');
const vcapUtils     = require('../utils/vcap-utils');

module.exports = function attachZoneInfo(req, res, next) {
  let routerConfig = req && req.app && req.app.get('mainRouterConfig');
  let iasConfig = req.extIasConfigOptions || (routerConfig && routerConfig.iasConfig && routerConfig.iasConfig.options);
  if (!iasConfig || !iasConfig.domain || req.zoneInfo) {
    return next();
  }
  let uaadomain = routerConfig.uaaConfig && routerConfig.uaaConfig.options && routerConfig.uaaConfig.options.uaadomain;
  let tenant = null;
  if (process.env.TENANT_HOST_PATTERN) {
    tenant = passportUtils.getUrlTenant(req);
    if (!tenant) {
      return next('Failed to extract tenant from tenant host pattern: ' + process.env.TENANT_HOST_PATTERN);
    }
    if (!uaadomain){
      let smsCredentials = vcapUtils.getServiceCredentials({ label: 'subscription-manager' });
      uaadomain = smsCredentials && smsCredentials.uaadomain;
    }
  }
  let logger = req && req.loggingContext;
  iasUtils.getZoneInfo(tenant, iasConfig, uaadomain, logger, (err, zoneInfo) => {
    if (err){
      return next(err);
    }
    if (zoneInfo && Object.keys(zoneInfo).length > 0) {
      req.zoneInfo = zoneInfo;
      tracer.info('Zone info found ' + JSON.stringify(zoneInfo));
    }
    next();
  });
};