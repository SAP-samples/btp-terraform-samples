'use strict';

const http = require('http');
const https = require('https');
const http2 = require('http2');
const WsProxy = require('./websockets/WsProxy');
const util = require('util');

function Server(server, wsServer) {
  this._server = server;
  this._wsServer = wsServer;
}

Server.prototype.close = function (callback) {
  const serverClose = util.promisify(this._server.close.bind(this._server));
  const wsServerClose = util.promisify(this._wsServer.close.bind(this._wsServer));
  Promise.all([
    serverClose(),
    wsServerClose()
  ]).then(() => {
    callback && callback(null);
  }).catch ((err) => {
    callback && callback(err);
  });
};

exports.start = function (app, callback) {
  let routerConfig = app.get('mainRouterConfig');
  let server;
  if (routerConfig.http2Support){
    server = http2.createServer(app);
  } else if (routerConfig.httpsOptions) {
    server = https.createServer(routerConfig.httpsOptions, app);
  } else {
    server = http.createServer(app);
  }
  if (routerConfig.incomingConnectionTimeout !== undefined) {
    server.timeout = routerConfig.incomingConnectionTimeout;
  }
  server.keepAliveTimeout = routerConfig.serverKeepAlive || 0;

  let wsServer = new WsProxy(app);
  wsServer.listen(server);

  server.on('error', callback);
  server.listen(routerConfig.serverPort, function () {
    app.logger.info('Application router is listening on port: ' +
        server.address().port);
    callback(undefined, new Server(server, wsServer));
  });
};