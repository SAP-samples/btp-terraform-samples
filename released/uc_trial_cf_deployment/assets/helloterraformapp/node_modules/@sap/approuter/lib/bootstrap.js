'use strict';

const https = require('https');
const expressSession = require('express-session');
const passport = require('passport');
const xsenv = require('@sap/xsenv');
const tokenUtils = require('./utils/token-utils');
const bodyParser = require('body-parser');
const cfNodeJsLogging = require('cf-nodejs-logging-support');
const additionalHeadersMiddleware = require('./middleware/additional-headers-middleware');
const agents = require('./backend-request/agents');
const authorizationMiddleware = require('./middleware/authorization-middleware');
const cannotProcessRequestMiddleware = require('./middleware/cannot-process-request-middleware');
const compressionMiddleware = require('./middleware/compression-middleware');
const configuration = require('./configuration');
const connect = require('./connect/connect');
const cookieUtils = require('./utils/cookie-utils');
const connectUtilsMiddleware = require('./middleware/connect-utils-middleware');
const errorHandler = require('./middleware/error-handler');
const extensions = require('./extensions/extensions');
const httpMethodMatchingMiddleware = require('./middleware/http-method-matching-middleware');
const jwtRefreshMiddleware = require('./middleware/jwt-refresh-middleware');
const logging = require('./utils/logger');
const loginCallbackMiddleware = require('./middleware/login-callback-middleware');
const loginMiddleware = require('./middleware/login-middleware');
const logoutMiddleware = require('./middleware/logout-middleware');
const memstoreConfig = require('./configuration/memstore-config');
const oauthConfig = require('./passport/oauth-configuration');
const pathRewritingMiddleware = require('./middleware/path-rewriting-middleware');
const clientCredentialsTokenMiddleware = require('./middleware/client-credentials-token-middleware');
const pluginEndpointMiddleware = require('./middleware/plugin-middleware');
const requestHandler = require('./middleware/request-handler');
const secureCookieMiddleware = require('./middleware/secure-cookie-middleware');
const sessionCookieMiddleware = require('./middleware/session-cookie-middleware');
const staticResourceHandler = require('./middleware/static-resource-handler');
const routeResponseHeadersHandler = require('./middleware/route-response-headers-handler');
const traceRequestMiddleware = require('./middleware/trace-request-middleware');
const welcomePageMiddleware = require('./middleware/welcome-page-middleware');
const whitelistServiceMiddleware = require('./middleware/whitelist-service-middleware');
const xsrfTokenMiddleware = require('./middleware/xsrf-token-middleware');
const attachRouterConfig = require('./middleware/attach-router-config');
const corsMiddleware = require('./middleware/cors-middleware');
const serviceTokenMiddleware = require('./middleware/service-token-middleware');
const destinationTokenMiddleware = require('./middleware/destination-token-middleware');
const subscriptionMiddleware = require('./middleware/subscription-middleware');
const cacheRequestMiddleware = require('./middleware/cache-request-middleware');
const service2ApprouterMiddleware = require('./middleware/service-to-approuter-middleware');
const subscriptionUtils = require('./utils/subscription-utils');
const serviceDestinationsMiddleware = require('./middleware/service-destinations-middleware');
const userApiMiddleware = require('./middleware/user-api-middleware');
const attachZoneInfo = require('./middleware/attach-zone-info');
const sapStatisticsMiddleware = require('./middleware/sap-statistics-middleware');
const applicationLogUtils = require('./utils/application-logs-utils');
const  stateParameterMiddleware  = require('./middleware/state-parameter-middleware');
const { STATE_PARAMETER_PATH } = require('./passport/utils');

module.exports = function bootstrap(options) {

  const certificates = xsenv.loadCertificates();
  agents.httpsAgent.options.ca = certificates;
  https.globalAgent.options.ca = certificates;

  const ext = extensions(options.extensions);
  const routerConfig = configuration.load(options);

  const app = connect();

  // can be overridden by per-request routerConfig
  app.set('mainRouterConfig', routerConfig);

  // Force logger to run the connect version. (default is express, forcing express is also legal)
  cfNodeJsLogging.forceLogger('connect');

  // Set the minimum logging level
  cfNodeJsLogging.setLoggingLevel(routerConfig.cfNodeJsLoggingLevel);


  app.use(sapStatisticsMiddleware);
  app.use(logging.getExpressMiddleware());
  app.use(connectUtilsMiddleware(app));
  app.use(cfNodeJsLogging.logNetwork);
  app.use(traceRequestMiddleware);
  app.use(STATE_PARAMETER_PATH,bodyParser.json());
  app.use(STATE_PARAMETER_PATH,stateParameterMiddleware);
  app.use(subscriptionUtils.getSaaSRegistryCallbackPath().onSubscriptionPrefix, bodyParser.json());
  app.use(subscriptionUtils.getSMSCallbackPath().onSubscriptionPrefix, bodyParser.json());
  app.use(serviceDestinationsMiddleware);

  ext.insertMiddleware('first', app);
  app.use(attachRouterConfig);
  app.use(attachZoneInfo);
  app.use(subscriptionMiddleware);
  app.use(corsMiddleware);

  const externalSessionStore = memstoreConfig.getExternalSessionStore(routerConfig.extSessionMgt);
  const sessionSecret = options.getSessionSecret ? options.getSessionSecret() : (cookieUtils.getExternalStoreSessionSecret(routerConfig.extSessionMgt) || cookieUtils.generateSessionSecret());

  app.set('sessionCookieKey', sessionSecret);
  app.set('externalSessionStore', externalSessionStore);
  tokenUtils.getTokens(app);
  applicationLogUtils.cacheDynamicLogLevel(app);
  const memoryStore = memstoreConfig.getMemoryStore(app);
  app.set('memoryStore', memoryStore);

  const cookieName = cookieUtils.getSessionCookieName();
  app.set('cookieName', cookieName);

  app.use(additionalHeadersMiddleware);
  app.use(welcomePageMiddleware);
  app.use(pathRewritingMiddleware);
  app.use(clientCredentialsTokenMiddleware);
  app.use(service2ApprouterMiddleware);

  const cookies = { secure: routerConfig.secureSessionCookie };
  if (routerConfig.cookies && routerConfig.cookies['SameSite']){
    cookies.sameSite = routerConfig.cookies['SameSite'];
  }
  app.use(expressSession({
    name: cookieName,
    resave: false,
    saveUninitialized: false,
    secret: sessionSecret,
    store: memoryStore,
    cookie: cookies,
    proxy: true
  }));

  passport.serializeUser(oauthConfig.getUserSerializer);
  passport.deserializeUser(oauthConfig.getUserDeserializer);
  app.use(passport.initialize());
  app.use(passport.session());

  if (routerConfig.secureSessionCookie === true) {
    app.use(secureCookieMiddleware);
  }

  app.use(loginCallbackMiddleware);

  app.use(loginMiddleware);
  if (routerConfig.jwtRefresh !== 0) {
    app.use(jwtRefreshMiddleware);
  }
  app.use(authorizationMiddleware);
  app.use(xsrfTokenMiddleware);
  app.use(userApiMiddleware);
  app.use(serviceTokenMiddleware);
  app.use(destinationTokenMiddleware);
  app.use(cacheRequestMiddleware);
  const pluginMetadataEndpoint = routerConfig.appConfig.pluginMetadataEndpoint;
  pluginMetadataEndpoint && app.use(pluginMetadataEndpoint, pluginEndpointMiddleware);
  app.use(logoutMiddleware);
  const whitelistService = routerConfig.appConfig.whitelistService;
  whitelistService && app.use(whitelistService.endpoint, whitelistServiceMiddleware);

  const compressionOptions = routerConfig.appConfig.compression;
  compressionOptions.enabled && app.use(compressionMiddleware(compressionOptions));

  ext.insertMiddleware('beforeRequestHandler', app);

  app.use(httpMethodMatchingMiddleware);
  app.use(routeResponseHeadersHandler);
  app.use(staticResourceHandler);
  app.use(sessionCookieMiddleware(cookieName));
  app.use(requestHandler);

  ext.insertMiddleware('beforeErrorHandler', app);
  app.use(cannotProcessRequestMiddleware);
  app.use(errorHandler);

  return app;
};
