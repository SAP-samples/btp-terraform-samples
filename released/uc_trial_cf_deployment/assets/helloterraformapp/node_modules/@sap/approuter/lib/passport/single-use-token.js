'use strict';

const tokenUtils = require('../utils/token-utils');
const vcapUtils = require('../utils/vcap-utils');
const request = require('../utils/request-utils');
const passportUtils = require('./utils');
const loggingUtils = require('../utils/logger');
const headerUtils = require('../utils/header-util');
const uaaUtils = require('../utils/uaa-utils');
const tracer = loggingUtils.getTracer(__filename);
const _ = require('lodash');

exports.createSessionByAuthCode = createSessionByAuthCode;
exports.fetchRefreshToken = fetchRefreshToken;
exports.exchangeOIDCTokenByXSUAAToken = exchangeOIDCTokenByXSUAAToken;
exports.fetchServiceToken = fetchServiceToken;
exports.createSession = createSession;
exports.callTokenService = callTokenService;
exports.getUaaOptions = getUaaOptions;

async function createSessionByAuthCode(req, cb) {
  try {
    const uaaOptions = await exports.getUaaOptions(req);
    const oidcToken = await exports.fetchServiceToken(headerUtils.getCorrelationId(req), req.query.approuterAuthCode);
    const xsuaaToken = await exports.exchangeOIDCTokenByXSUAAToken(req, oidcToken.token, uaaOptions);
    const refreshToken = await exports.fetchRefreshToken(req, xsuaaToken.access_token, uaaOptions);
    await exports.createSession(req, uaaOptions, {xsuaaToken, refreshToken});
    cb();
  } catch (err) {
    cb(err);
  }
}

async function fetchServiceToken(correlationId, approuterAuthCode) {
  let credentials = vcapUtils.getServiceCredentials(service => service.credentials.endpoints && !!service.credentials.endpoints['token-service']);
  if (credentials) {
    const tokenInfo = await tokenUtils.getClientCredentialsToken(null, correlationId, credentials.uaa, null);
    return await callTokenService(credentials.endpoints['token-service'], tokenInfo, approuterAuthCode);
  }
  throw new Error('Failed to obtain token by approuterAuthCode, no credentials for token-service endpoint found');
}

function exchangeOIDCTokenByXSUAAToken(req, oidcToken, uaaOptions) {
  return new Promise((resolve, reject) => {
    tokenUtils.exchangeToken(oidcToken, headerUtils.getCorrelationId(req), uaaOptions, (err, accessToken, xsuaaToken) => {
      if (err) {
        return reject('Failed to exchange provided OIDC token by XSUAA token ' + err);
      }
      resolve(xsuaaToken);
    });
  });
}

function createSession(req, uaaOptions, {xsuaaToken, refreshToken}) {
  return new Promise((resolve, reject) => {
    let urlTenant = passportUtils.getUrlTenant(req);
    let tokenContext = {
      accessToken: xsuaaToken.access_token,
      refreshToken: refreshToken.refresh_token,
      expiresIn: xsuaaToken.expires_in,
      scope: xsuaaToken.scope,
      xsuaaToken: xsuaaToken,
      singleUseToken: true,
      urlTenant: urlTenant,
      oauthOptions: uaaOptions
    };
    tracer.debug(`Token context when session created, ${JSON.stringify(tokenContext)}`);
    passportUtils.storeToken(req, tokenContext, (err) => {
      if (err) {
        return reject('Failed to store token ' + err);
      }
      req.app.approuter.emit('login', req.session);
      resolve();
    });
  });
}

function callTokenService(endpoint, tokenInfo, approuterAuthCode) {
  return new Promise((resolve, reject) => {
    let serviceTokenOptions = {
      url: `${endpoint}?authCode=${approuterAuthCode}`,
      headers: {
        Authorization: 'Bearer ' + tokenInfo.accessToken
      }
    };
    request.get(serviceTokenOptions, (err, res, body) => {
      if (err || res.statusCode !== 200) {
        return reject('Failed to fetch token by authCode ' + (err ? err : res && res.statusCode));
      }
      try {
        const tokenData = JSON.parse(body);
        resolve(tokenData);
      } catch (err) {
        reject(`Failed to parse OIDC token ${err}`);
      }
    });
  });
}

async function getUaaOptions(req) {
  return new Promise((resolve, reject) => {
    uaaUtils.getUaaConfig(req, (err, uaaConfig) => {
      if (err) {
        return reject('Failed to get token uaa config ' + err);
      }
      uaaConfig = _.clone(uaaConfig);
      uaaConfig.url = uaaConfig.url.slice(0, uaaConfig.url.length - 1);
      uaaConfig.tokenURL = `${uaaConfig.url}/oauth/token`;
      resolve(uaaConfig);
    });
  });
}

async function fetchRefreshToken(req, accessToken, uaaOptions) {
  try {
    return await tokenUtils.getRefreshToken(accessToken, uaaOptions);
  } catch (error) {
    throw new Error(error);
  }
}