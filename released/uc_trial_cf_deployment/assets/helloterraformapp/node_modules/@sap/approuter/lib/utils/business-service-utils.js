/* eslint-disable camelcase,max-depth */
'use strict';

const xsenv = require('@sap/xsenv');
const NodeCache = require('node-cache');
const destinationUtils = require('./destination-utils');
const headerUtils = require('./header-util');
const stdTTL = 300;
const tenantDestinationBSCredentialsCache = new NodeCache({stdTTL: stdTTL, checkperiod: 320});
const instanceDestinationBSCredentialsCache = new NodeCache({stdTTL: stdTTL, checkperiod: 320});
const request = require('./request-utils');
const url = require('url');
const subscribedApplicationsUtils = require('./subscribed-applications-utils');
const html5RepoUtils = require('../utils/html5-repo-utils');

const expiredDataMapInstance = new Map();
const expiredDataMapTenant = new Map();

instanceDestinationBSCredentialsCache.on('expired', function(key, value){
  expiredDataMapInstance.set(key, value);
});
tenantDestinationBSCredentialsCache.on('expired', function(key, value){
  expiredDataMapTenant.set(key, value);
});

module.exports.getCredentials = getCredentials;
module.exports.getDestinationCredentialsBySapCloudService = getDestinationCredentialsBySapCloudService;
module.exports.cacheBSDestinations = cacheBSDestinations;
module.exports.getEndPoint = getEndPoint;
module.exports.getGrantType = getGrantType;
module.exports.forwardIasToken = forwardIasToken;
module.exports.downloadHTML5Application = downloadHTML5Application;
module.exports.getHTML5Applications = getHTML5Applications;
module.exports.fetchDestinationBSCredentials = fetchDestinationBSCredentials;

function getCredentials(serviceName, ignoreDots, req) {
  if (serviceName === 'sap-approuter-userapi') {
    return {url: 'https://dummy.com'};
  }
  try {
    return xsenv.serviceCredentials(function (service) {
      let vcapSrvServiceName;
      if (service.credentials && service.credentials['sap.cloud.service.alias']) {
        vcapSrvServiceName = ignoreDots ? service.credentials['sap.cloud.service.alias'].replace(/\./g, '') : service.credentials['sap.cloud.service.alias'];
        if (vcapSrvServiceName === serviceName) {
          return true;
        }
      }

      if (service.credentials && service.credentials['sap.cloud.service']) {
        vcapSrvServiceName = ignoreDots ? service.credentials['sap.cloud.service'].replace(/\./g, '') : service.credentials['sap.cloud.service'];
        if (vcapSrvServiceName === serviceName) {
          return true;
        }
      }

      if (service.tags) {
        for (let i = 0; i < service.tags.length; i++) {
          vcapSrvServiceName = ignoreDots ? service.tags[i].replace(/\./g, '') : service.tags[i];
          if (serviceName === vcapSrvServiceName) {
            return true;
          }
        }
      }
      return false;
    });
  } catch (e) {
    let credentials = getBSDestination(serviceName, ignoreDots, req);
    if (!credentials) {
      credentials = html5RepoUtils.getCredentials(serviceName, req);
    }
    return credentials;
  }
}

function getDestinationCredentialsBySapCloudService(req, sapCloudService, cb) {
  let tracer = req.loggingContext.getTracer(__filename);
  module.exports.fetchDestinationBSCredentials(req, tracer, function (err, destinationBSCredentials) {
    if (err) {
      return cb(err);
    }
    if (!destinationBSCredentials || destinationBSCredentials.length === 0) {
      return cb();
    }
    let mainService = null;
    let mainServiceKey = null;
    let relatedBusinessServicesXsappNames = [];

    for (let sapCloudServiceKey in destinationBSCredentials) {
      if (sapCloudServiceKey.indexOf(sapCloudService) > -1) {
        mainService = destinationBSCredentials[sapCloudServiceKey];
        mainServiceKey = sapCloudServiceKey;
        break;
      }
    }

    if (!mainService) {
      return cb();
    }

    for (let sapCloudServiceKey in destinationBSCredentials) {
      if (destinationBSCredentials[sapCloudServiceKey].credentials.destinationId === mainService.credentials.destinationId
          && (destinationBSCredentials[sapCloudServiceKey].credentials.uaa && destinationBSCredentials[sapCloudServiceKey].credentials.uaa.xsappname)
          && sapCloudServiceKey !== mainServiceKey
          && destinationBSCredentials[sapCloudServiceKey].credentials.saasregistryenabled) {
        relatedBusinessServicesXsappNames.push(destinationBSCredentials[sapCloudServiceKey].credentials.uaa.xsappname);
      }
    }
    cb(null, mainService, relatedBusinessServicesXsappNames);
  });
}

function modifyDestinationCacheFromExpiredData(req){
  let expiredDataForDestinationKey = expiredDataMapInstance.get(req.destinationKey);
  let expiredDataForTenant = expiredDataMapTenant.get(req.tenant);

  if (req.destinationKey && expiredDataForDestinationKey !== undefined) {
    instanceDestinationBSCredentialsCache.set(req.destinationKey, expiredDataForDestinationKey);
  }
  else if (!req.destinationKey && expiredDataForTenant !== undefined) {
    tenantDestinationBSCredentialsCache.set(req.tenant, expiredDataForTenant);
  }
}

function cacheBSDestinations(req, cb) {
  let specificStdTTL = process.env.STDTTL || stdTTL;
  let tracer = req.loggingContext.getTracer(__filename);

  addDestinationKey(req);
  let destinationBSCredentials = getDestinationBSCredentials(req);
  if (destinationBSCredentials) {
    return cb();
  }
  fetchDestinationBSCredentials(req, tracer, function (err, fetchedBSCredentials) {
    if (err) {
      modifyDestinationCacheFromExpiredData(req);
      tracer.error('Failed to fetch destinations from destination service, using expired destinations cache instead,  error: ' + err.message);
      req.destServiceError = err;
      return cb();
    }
    if (req.destinationKey) {
      instanceDestinationBSCredentialsCache.set(req.destinationKey, fetchedBSCredentials, specificStdTTL);
      expiredDataMapInstance.delete(req.destinationKey);
    } else {
      tenantDestinationBSCredentialsCache.set(req.tenant, fetchedBSCredentials, specificStdTTL);
      expiredDataMapTenant.delete(req.tenant);
    }
    return cb();
  });
}

function getEndPoint(serviceCredentials, endPointName) {
  let endPoint = {};
  if (endPointName) {
    if (serviceCredentials.endpoints) {
      if (typeof (serviceCredentials.endpoints[endPointName]) === 'string') {
        endPoint.url = serviceCredentials.endpoints[endPointName] + '/';
      } else if (typeof (serviceCredentials.endpoints[endPointName]) === 'object') {
        endPoint.url = serviceCredentials.endpoints[endPointName].url;
        endPoint.timeout = serviceCredentials.endpoints[endPointName].timeout;
      }
    }
    if (serviceCredentials[endPointName]) {
      if (typeof (serviceCredentials[endPointName]) === 'string') {
        endPoint.url = serviceCredentials[endPointName] + '/';
      } else if (typeof (serviceCredentials[endPointName]) === 'object') {
        endPoint.url = serviceCredentials[endPointName].url;
        endPoint.timeout = serviceCredentials[endPointName].timeout;
      }
    }
  } else {
    endPoint.url = serviceCredentials.url ? serviceCredentials.url + '/' : serviceCredentials.uri + '/';
  }
  endPoint.timeout = endPoint.timeout ? endPoint.timeout : 30000;
  return endPoint;
}

function getGrantType(serviceCredentials) {
  if (serviceCredentials.grant_type) {
    return serviceCredentials.grant_type;
  }
  return 'user_token';
}

function forwardIasToken(serviceCredentials) {
  return serviceCredentials.forwardiastoken;
}

function downloadHTML5Application(req, res) {
  return new Promise((resolve, reject) => {
    const dynamicRoutingUtils = require('./dynamic-routing-utils');
    let appKey = dynamicRoutingUtils.getApplicationKey({url: '/' + url.parse(req.url).path.split('/')[3]});
    let appHostId = null;
    let html5RepoToken = req.app.services && req.app.services['html5-apps-repo-rt'] &&
        req.app.services['html5-apps-repo-rt'].token && req.app.services['html5-apps-repo-rt'].token.accessToken;
    if (!html5RepoToken){
      return reject('Failed to find html5-repo token');
    }
    module.exports.getHTML5Applications(req, async function (err, html5Applications) {
      if (err) {
        return reject(err);
      } else {
        if (!html5Applications.applications || html5Applications.applications.length === 0) {
          const error = new Error('No html5 applications found');
          error.statusCode = 404;
          return reject(error);
        }
        for (let i = 0; i < html5Applications.applications.length; i++) {
          if (html5Applications.applications[i]['sap.cloud.service'].replace(/\./g, '') === appKey.appPrefix &&
              html5Applications.applications[i].applicationName === appKey.appNameWithoutPrefix &&
              html5Applications.applications[i].applicationVersion === appKey.appVersion &&
              ((appKey.appDestinationId && appKey.appDestinationId === html5Applications.applications[i].destinationId) ||
                  (!appKey.appDestinationId && !html5Applications.applications[i].destinationId))) {
            appHostId = html5Applications.applications[i]['app-host-id'];
            break;
          }
        }
      }
      if (appHostId === null) {
        return reject('Application ' + appKey.entireKey + ' not found');
      }
      let html5Cred = xsenv.serviceCredentials({tag: 'html5-apps-repo-rt'});
      let requestOptions = {
        url: html5Cred.uri + '/applications/content/' + appKey.appNameWithoutPrefix + '-' + appKey.appVersion,
        headers: {
          'Authorization': 'Bearer ' + html5RepoToken,
          'x-app-host-id': appHostId
        }
      };
      await request.pipe(requestOptions,res);
    });
  });
}

function getHTML5Applications(req, cb) {
  let tracer = req.loggingContext.getTracer(__filename);
  fetchDestinationBSCredentials(req, tracer, function (err, destinationBSCredentials) {
    if (err) {
      return cb(err);
    }
    let getApplicationPromises = [];
    if (destinationBSCredentials) {
      for (let sapCloudServiceKey in destinationBSCredentials) {
        // noinspection JSUnfilteredForInLoop
        let cred = destinationBSCredentials[sapCloudServiceKey].credentials;
        if (cred['html5-apps-repo'] && cred['html5-apps-repo']['app_host_id']) {
          let appHostIds = cred['html5-apps-repo']['app_host_id'].replace(/\s/g, '').split(',');
          let xsappnames = null;
          if (cred['html5-apps-repo']['xsappname']) {
            xsappnames = cred['html5-apps-repo']['xsappname'].replace(/\s/g, '').split(',');
          }
          appHostIds.forEach(function (appHostId, index) {
            let options = {
              xsappname: xsappnames ? xsappnames[index] : null,
              appHostId: appHostId,
              sapCloudService: cred.serviceName,
              identityZone: cred.uaa && cred.uaa.identityzone ? cred.uaa.identityzone : req.tenant,
              destinationName: cred.destinationName,
              destinationId: cred.destinationId
            };
            getApplicationPromises.push(getApplicationMetadataPromise(req, options));
          });
        }
      }
      Promise.all(getApplicationPromises)
        .then(values => {
          let result = {
            applications: [],
            errors: []
          };
          values.forEach((value) => {
            if (value.applications && value.applications.length > 0) {
              let appArrToMerge = [result.applications, value.applications];
              result.applications = Array.prototype.concat(...appArrToMerge);
            }
            if (value.error) {
              result.errors.push(value.error);
            }
          });
          subscribedApplicationsUtils.addSubscribedApplications(req, result, cb);
        });
    } else {
      cb(null, {});
    }
  });
}


function fetchDestinationBSCredentials(req, tracer, cb) {
  let html5RepoDestinations = {};
  let iasDestinations = {};
  let destinationBSCredentials = {};
  let tenant = req.tenant;
  getDestinationsFromDestinationService(req, function (err, destinationsData) {
    if (err) {
      tracer.error('Failed to get destinations by tenant ' + tenant + ' ' + err);
      return cb(err);
    }
    destinationsData.forEach(function (destination) {
      if (destination.hasOwnProperty('sap.cloud.service')) {
        let serviceName = destination['sap.cloud.service'];
        let sapCloudServiceKey = destination.destinationId ? serviceName + '!' + destination.destinationId : serviceName;
        let destinationXsappname = getDestinationXsappname(destination, req);

        if (isHTML5RepoDestination(destination)) {
          html5RepoDestinations = collectHTMLRepoDestinations(destination, html5RepoDestinations, sapCloudServiceKey);
        } else if (isIASDestination(destination)) {
          iasDestinations = collectIasDestinations(destination, iasDestinations, sapCloudServiceKey, serviceName, destinationXsappname);
        } else {
          destinationBSCredentials = collectXsuaaOrXsuaaAppHostDestinations(destination, destinationBSCredentials, serviceName, destinationXsappname, sapCloudServiceKey, tracer);
        }
      }
    });
    tracer.debug('iasDestinations: %s', JSON.stringify(iasDestinations));
    mergeIasDestinations(destinationBSCredentials, iasDestinations);
    tracer.debug('html5RepoDestinations: %s', JSON.stringify(html5RepoDestinations));
    mergeHTMLRepoDestinations(destinationBSCredentials, html5RepoDestinations);
    tracer.debug('destinationBSCredentials: %s', JSON.stringify(destinationBSCredentials));
    cb(null, destinationBSCredentials);
  });
}

function getBSDestination(serviceName, ignoreDots, req) {
  if (!req || !req.tenant) {
    return null;
  }
  addDestinationKey(req);
  let destinationBSCredentials = getDestinationBSCredentials(req);
  if (destinationBSCredentials) {
    for (let sapCloudServiceKey in destinationBSCredentials) {
      let indexOfDestId = sapCloudServiceKey.indexOf('!');
      let bsServiceName = indexOfDestId > -1 ? sapCloudServiceKey.substring(0, indexOfDestId) : sapCloudServiceKey;
      let destServiceName = ignoreDots ? bsServiceName.replace(/\./g, '') : bsServiceName;
      if (destServiceName === serviceName) {
        return destinationBSCredentials[sapCloudServiceKey].credentials;
      }
    }
  }
  return null;
}

function getDestinationBSCredentials(req) {
  function isEmpty(destinationBSCredentials) {
    return !destinationBSCredentials;
  }

  let destinationBSCredentials = req.destinationKey ? instanceDestinationBSCredentialsCache.get(req.destinationKey) : tenantDestinationBSCredentialsCache.get(req.tenant);
  if (isEmpty(destinationBSCredentials)) {
    return null;
  } else {
    return destinationBSCredentials;
  }
}

function getApplicationMetadataPromise(req, options) {
  return new Promise((resolve) => {
    let html5Cred = xsenv.serviceCredentials({tag: 'html5-apps-repo-rt'});
    let html5RepoToken = req.app.services && req.app.services['html5-apps-repo-rt'] &&
        req.app.services['html5-apps-repo-rt'].token && req.app.services['html5-apps-repo-rt'].token.accessToken;
    if (!html5RepoToken){
      let result = {
        error: {
          reason: 'Failed to find html5-repo token'
        }
      };
      return resolve(result);
    }
    let queryIndex = req.url.indexOf('?');
    let queries = queryIndex > -1 ? req.url.slice(queryIndex) : '';
    let requestOptions = {
      url: html5Cred.uri + `/applications/metadata/${queries}`,
      headers: {
        Authorization: 'Bearer ' + html5RepoToken
      }
    };
    requestOptions.headers['x-app-host-id'] = options.appHostId;
    request.get(requestOptions, function onResponse(err, res, body) {
      let result = {};
      if (err || res.statusCode !== 200) {
        result.error = {
          destinationId: options.destinationId,
          destinationName: options.destinationName,
          sapCloudService: options.sapCloudService,
          appHostId: options.appHostId,
          reason: res && res.body ? res.body : 'Failed to get metadata, ' + (err || (res && res.statusCode && `response status code: ${res.statusCode}`))
        };
      } else {
        let responseJSON = JSON.parse(body);
        if (responseJSON.length > 0) {
          responseJSON.forEach(function (app) {
            delete app.configuration;
            app['xsappname'] = options.xsappname;
            app['sap.cloud.service'] = options.sapCloudService;
            app['identityZone'] = options.identityZone;
            app['app-host-id'] = options.appHostId;
            app['destinationId'] = options.destinationId;
            app['destinationName'] = options.destinationName;
            let host = req.HTML5AppHost.indexOf('https://') !== 0 ? 'https://' + req.HTML5AppHost : req.HTML5AppHost;
            app['url'] = host + '/' + (options.destinationId ? options.destinationId + '.' : '') +
                options.sapCloudService.replace(/\./g, '') + '.' + app.applicationName + '-' + app.applicationVersion;
          });
          result.applications = responseJSON;
        } else {
          result.error = {
            destinationName: options.destinationName,
            destinationId: options.destinationId,
            sapCloudService: options.sapCloudService,
            appHostId: options.appHostId,
            reason: 'No html5 applications found in App Host'
          };
        }
      }
      resolve(result);
    });
  });
}

function mergeHTMLRepoDestinations(destinationBSCredentials, html5RepoDestinations) {
  if (!html5RepoDestinations || !destinationBSCredentials) {
    return;
  }
  for (let sapCloudServiceKey in html5RepoDestinations) {
    if (destinationBSCredentials[sapCloudServiceKey] && destinationBSCredentials[sapCloudServiceKey].credentials) {
      destinationBSCredentials[sapCloudServiceKey].credentials['html5-apps-repo'] = {
        app_host_id: html5RepoDestinations[sapCloudServiceKey].appHostId,
        xsappname: html5RepoDestinations[sapCloudServiceKey].xsappname
      };
    }
  }
}

function getDestinationsFromDestinationService(req, cb) {
  let urlPath = url.parse(req.url).path;
  if (req.destinationKey) {
    destinationUtils.getDestinationsByDestinationKey(req.app, req.destinationKey, headerUtils.getCorrelationId(req), true, function (err, instanceDestinations) {
      if (err) {
        return cb(err);
      }
      cb(null, instanceDestinations);
    });
  } else if (urlPath.startsWith('/applications') || urlPath.startsWith('/callback')) {
    destinationUtils.getServiceInstanceDestinationsByTenant(req, function (err, instanceDestinations) {
      if (err) {
        return cb(err);
      }
      destinationUtils.getDestinationsByTenant(headerUtils.getCorrelationId(req), req.tenant, null, req.zoneInfo, function (err, subaccountDestinations) {
        if (err) {
          return cb(err);
        }
        const destinations = instanceDestinations.concat(subaccountDestinations);
        cb(null, destinations);
      });
    });
  } else {
    destinationUtils.getDestinationsByTenant(headerUtils.getCorrelationId(req), req.tenant, null, req.zoneInfo, function (err, subaccountDestinations) {
      if (err) {
        return cb(err);
      }
      cb(null, subaccountDestinations);
    });
  }
}

function addDestinationKey(req) {
  const dynamicRoutingUtils = require('./dynamic-routing-utils');
  let appKey = dynamicRoutingUtils.getApplicationKey(req);
  req.destinationKey = appKey && appKey.appDestinationId ? req.tenant + '_' + appKey.appDestinationId : null;
}

function isIASDestination(destination) {
  return destination.hasOwnProperty('domain') && !destination.hasOwnProperty('uaaDomain') && !destination.hasOwnProperty('xsappname');
}

function isHTML5RepoDestination(destination) {
  return destination.hasOwnProperty('app_host_id');
}

function collectHTMLRepoDestinations(destination, html5RepoDestinations, sapCloudServiceKey) {
  if (html5RepoDestinations[sapCloudServiceKey]) {
    html5RepoDestinations[sapCloudServiceKey]['appHostId'] =
        html5RepoDestinations[sapCloudServiceKey]['appHostId'] + ',' + destination.app_host_id;
    html5RepoDestinations[sapCloudServiceKey]['xsappname'] =
        html5RepoDestinations[sapCloudServiceKey]['xsappname'] + ',' + destination.xsappname;
  } else {
    html5RepoDestinations[sapCloudServiceKey] = {
      appHostId: destination.app_host_id,
      xsappname: destination.xsappname
    };
  }
  return html5RepoDestinations;
}

function collectIasDestinations(destination, iasDestinations, sapCloudServiceKey, serviceName, destinationXsappname) {
  iasDestinations[sapCloudServiceKey] = {
    clientid: destination.clientId,
    clientsecret: destination.clientSecret,
    certificate: destination.certificate,
    key: destination.key,
    url: destination.url || destination.tokenServiceURL,
    domain: destination.domain,
    destinationName: destination.Name,
    destinationId: destination.destinationId,
    serviceName: serviceName,
    destinationXsappname: destinationXsappname && destinationXsappname.valueOf()
  };
  return iasDestinations;
}

function getDestinationXsappname(destination, req) {
  let destinationXsappname = null;
  if (destination.destinationId) {
    let destinationKey = req.tenant + '_' + destination.destinationId;
    if (req.app.services[destinationKey] && req.app.services[destinationKey]['credentials']) {
      destinationXsappname = req.app.services[destinationKey]['credentials']['xsappname'] ||
          req.app.services[destinationKey]['credentials']['clientId'].replace('sb-', '');
    }
  }
  return destinationXsappname;
}

function collectXsuaaOrXsuaaAppHostDestinations(destination, destinationBSCredentials, serviceName, destinationXsappname, sapCloudServiceKey, tracer) {
  let ownUAACredentials = xsenv.serviceCredentials({label: 'xsuaa'});

  destinationBSCredentials[sapCloudServiceKey] = {
    credentials: {
      destinationName: destination.Name,
      serviceName: serviceName,
      destinationXsappname: destinationXsappname && destinationXsappname.valueOf()
    }
  };

  for (let prop in destination) {
    if (prop === 'html5-apps-repo.app_host_id') {
      destinationBSCredentials[sapCloudServiceKey].credentials['html5-apps-repo'] = {app_host_id: destination[prop]};
    }
    if (prop === 'grant_type' || prop === 'uri' || prop === 'destinationId' || prop === 'saasregistryenabled') {
      destinationBSCredentials[sapCloudServiceKey].credentials[prop] = destination[prop];
    }
    if (prop === 'endpoints' || prop === 'html5-apps-repo') {
      try {
        destinationBSCredentials[sapCloudServiceKey].credentials[prop] = JSON.parse(destination[prop]);
      } catch (err) {
        tracer.error('Failed to parse ' + prop + 'property for destination ' + destination.Name + ' ' + err);
        break;
      }
    }
    if (prop.startsWith('endpoints.')) {
      if (!destinationBSCredentials[sapCloudServiceKey].credentials['endpoints']) {
        destinationBSCredentials[sapCloudServiceKey].credentials['endpoints'] = {};
      }
      let parts = prop.split('.');
      if (!destinationBSCredentials[sapCloudServiceKey].credentials['endpoints'][parts[1]]) {
        destinationBSCredentials[sapCloudServiceKey].credentials['endpoints'][parts[1]] = {};
      }
      destinationBSCredentials[sapCloudServiceKey].credentials['endpoints'][parts[1]][parts[2]] = parts[2] === 'timeout' ? parseInt(destination[prop]) : destination[prop];
    }
    if ((prop === 'clientId' || prop === 'clientSecret' || prop === 'tokenServiceURL' || prop === 'tokenServiceURLType'
        || prop === 'xsappname' || prop === 'subaccountId' || prop === 'identityZone' || prop === 'uaaDomain') && !destinationBSCredentials[sapCloudServiceKey].credentials.hasOwnProperty('uaa')) {
      destinationBSCredentials[sapCloudServiceKey].credentials['uaa'] = {};
    }
    if (prop === 'uaaDomain') {
      destinationBSCredentials[sapCloudServiceKey].credentials['uaa']['uaadomain'] = destination[prop];
    }
    if (prop === 'clientId') {
      destinationBSCredentials[sapCloudServiceKey].credentials['uaa']['clientid'] = destination[prop];
      if (!destinationBSCredentials[sapCloudServiceKey].credentials['uaa']['uaadomain']) {
        destinationBSCredentials[sapCloudServiceKey].credentials['uaa']['uaadomain'] = ownUAACredentials.uaadomain;
      }
    }
    if (prop === 'subaccountId') {
      destinationBSCredentials[sapCloudServiceKey].credentials['uaa']['subaccountid'] = destination[prop];
    }
    if (prop === 'clientSecret') {
      destinationBSCredentials[sapCloudServiceKey].credentials['uaa']['clientsecret'] = destination[prop];
    }
    if (prop === 'tokenServiceURL') {
      let urlObj = url.parse(destination[prop]);
      destinationBSCredentials[sapCloudServiceKey].credentials['uaa']['url'] = urlObj.protocol + '//' + urlObj.hostname;
      destinationBSCredentials[sapCloudServiceKey].credentials['uaa']['identityzone'] = urlObj.hostname.split('.')[0];
    }
    if (prop === 'xsappname') {
      destinationBSCredentials[sapCloudServiceKey].credentials['uaa'][prop] = destination[prop];
    }
  }
  return destinationBSCredentials;
}

function mergeIasDestinations(destinationBSCredentials, iasDestinations) {
  if (!iasDestinations) {
    return;
  }
  for (let sapCloudServiceKey in iasDestinations) {
    if (destinationBSCredentials[sapCloudServiceKey] && destinationBSCredentials[sapCloudServiceKey].credentials) {
      destinationBSCredentials[sapCloudServiceKey].credentials['ias'] = iasDestinations[sapCloudServiceKey];
    } else {
      destinationBSCredentials[sapCloudServiceKey] = {
        credentials: {
          destinationName: iasDestinations[sapCloudServiceKey].destinationName,
          destinationId: iasDestinations[sapCloudServiceKey].destinationId,
          serviceName: iasDestinations[sapCloudServiceKey].serviceName,
          ias: iasDestinations[sapCloudServiceKey]
        }
      };
    }
  }
}