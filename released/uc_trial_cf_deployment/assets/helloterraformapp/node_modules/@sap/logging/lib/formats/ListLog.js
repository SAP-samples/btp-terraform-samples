'use strict';

const replaceNewLines = require('./common').replaceNewLines;
const CFLog = require('./CFLog');

const FIELD_SEPARATOR = '#';

// Reference: http://help.sap.com/saphelp_nw73ehp1/helpdata/en/53/82dae7c2f5439a8afd1b0ee95c2e45/content.htm

class ListLog {
  constructor(env) {
    this._env = env;
    this._shouldReplaceNewLines = env.runsOnXSA;
  }

  format(entryCtx) {
    const entry = [
      '2.0',
      entryCtx.timeCreated.format('YYYY MM DD HH:mm:ss:SSS'),
      entryCtx.timezoneOffset,
      entryCtx.level.toUpperCase(),
      normalizeField(this, entryCtx.component), // source name

      '', // message code
      normalizeField(this, entryCtx.csnComponent),
      '', // dcComponent
      '', // GUID
      normalizeField(this, entryCtx.correlationId),

      '', // application
      '', // location
      (this._env.logUser) ? normalizeField(this, entryCtx.user) : '',
      normalizeField(this, entryCtx.sessionId),
      '', // transaction

      normalizeField(this, entryCtx.rootContextId),
      normalizeField(this, entryCtx.transactionId),
      normalizeField(this, entryCtx.connectionId),
      normalizeField(this, entryCtx.connectionCounter),

      normalizeField(this, entryCtx.id), // instead of Thread Name
      'PLAIN', // message type
      '', // resourceBundle
      normalizeField(this, entryCtx.message)
    ];

    return FIELD_SEPARATOR + entry.join(FIELD_SEPARATOR) + FIELD_SEPARATOR;
  }

  formatNetwork(entryCtx) {
    const cfLog = new CFLog(this._env);
    const cfNetworkLog = cfLog.formatNetwork(entryCtx);
    entryCtx.message = cfNetworkLog;
    return this.format(entryCtx);
  }
}

function normalizeField(formatter, input) {
  if (!input) {
    return '';
  }

  input = input.replace(/\\/g, '\\\\');
  input = input.replace(/#/g, '\\#');
  if (formatter._shouldReplaceNewLines) {
    input = replaceNewLines(input);
  }
  return input;
}

module.exports = ListLog;
